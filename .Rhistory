install.packages("RMySQL")
install.packages("RMySQL")
optunity.maximize
19321*0.06
7000 * 0.06
1159.26 - 420
source('src/config/include.R',encoding='utf-8')
source('src/config/include.R',encoding='utf-8')
source('src/config/db_config.R',encoding='utf-8')
source('src/config/include.R',encoding='utf-8')
dbinfo = 'china_future_info'
db = 'china_future_ods_day'
#tbname = 'dlcmi'
tbname = 'dlami'
#tbnameinfo = 'dlc'
tbnameinfo = 'dla'
#tbs = c('dlc01','dlc03','dlc05','dlc07','dlc09','dlc11')
tbs = c('dlax01','dlax03','dlax05','dlax07','dlax09','dlax11',
'dlay01','dlay03','dlay05','dlay07','dlay09','dlay11')
scale
unscale
?scale
scale(c(1,2,3,4,5))
x = scale
x = scale(c(1,2,3,4,5))
x
attr(x)
x[1]
?kmeans
?scale
rm(list = ls(all=T))
require(RMySQL)
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbSendQuery(conn,'SET NAMES gbk')
games = dbReadTable(conn,'games')
games
eur =  dbReadTable(conn,'eur_lottery')
asia = dbReadTable(conn,'asia_lottery')
head(eur)
?merge
head(games)
bigtable = merge(games,eur,by = 'id')
head(eur)
bigtable = merge(games,eur,by.x = 'id',by.y = '序号')
head(bigtable)
bigtable = merge(bigtable,asia,by.x='id',by.y='序号')
bigtable = merge(games,eur,by.x = 'id',by.y = '序号')
rm(list=ls(all=T))
require('RMySQL')
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbSendQuery(conn,'SET NAMES gbk')
games = dbReadTable(conn,'games')
eur =  dbReadTable(conn,'eur_lottery')
asia = dbReadTable(conn,'asia_lottery')
bigtable = merge(games,eur,by.x = 'id',by.y = '序号')
head(bigtable)
head(games)
head(subset(games,主队=='朴茨茅斯'))
head(subset(games,主队=='朴茨茅斯' || 客队 == '朴茨茅斯'))
head(subset(games,主队=='朴茨茅斯' | 客队 == '朴茨茅斯'))
head(subset(games,主队=='朴茨茅斯' | 客队 == '朴茨茅斯'),10)
head(games)
aggregate(games$比分,by = games$比分,length)
games$比分
?aggregate
aggregate(games$比分,by = list(games$比分),length)
x = aggregate(games$比分,by = list(games$比分),length)
total=sum(x$x)
total
x$ratio = x$x / total
x
head(x)
colnames(x) = c('fen','num','ratio')
head(x)
score = as.character(x$fen)
score = strsplit(score,':')
score
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
x$fst = pre_score
x$sec = pre_score
x
head(x)
x$sec = aft_score
head(x)
x$total_fen = x$fst + x$sec
head(x)
head(x,10)
aggregate(x$num,by = list(x$total_fen),sum)
xx = aggregate(x$num,by = list(x$total_fen),sum)
sum(xx$Group.1)
sum(xx$x)
head(xx)
xx$ratio = xx$x / 5040
head(xx)
xx$cum = cumsum(xx$ratio)
xx
x
xx
subgames = games
subgames = games
x = aggregate(subgames$比分,by = list(subgames$比分),length)
head(games)
subgames = subset(games,season = '2003-2004')
x = aggregate(subgames$比分,by = list(subgames$比分),length)
total=sum(x$x)
x$ratio = x$x / total
colnames(x) = c('fen','num','ratio')
score = as.character(x$fen)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
x$fst = pre_score
x$sec = aft_score
x$total_fen = x$fst + x$sec
xx = aggregate(x$num,by = list(x$total_fen),sum)
xx$ratio = xx$x / 5040
xx$cum = cumsum(xx$ratio)
xx
head(xx)
subgames
head(subgames)
nrow(subgames)
subgames = subset(games,season == '2003-2004')
subgames = subset(games,season == '2003-2004')
x = aggregate(subgames$比分,by = list(subgames$比分),length)
total=sum(x$x)
x$ratio = x$x / total
colnames(x) = c('fen','num','ratio')
score = as.character(x$fen)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
x$fst = pre_score
x$sec = aft_score
x$total_fen = x$fst + x$sec
xx = aggregate(x$num,by = list(x$total_fen),sum)
xx$ratio = xx$x / nrow(subgames)
xx$cum = cumsum(xx$ratio)
xx
x
xx
subgames = subset(games,season == '2013-2014')
x = aggregate(subgames$比分,by = list(subgames$比分),length)
total=sum(x$x)
x$ratio = x$x / total
colnames(x) = c('fen','num','ratio')
score = as.character(x$fen)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
x$fst = pre_score
x$sec = aft_score
x$total_fen = x$fst + x$sec
xx = aggregate(x$num,by = list(x$total_fen),sum)
xx$ratio = xx$x / nrow(subgames)
xx$cum = cumsum(xx$ratio)
xx
rm(list=ls(all=T))
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
rm(list=ls(all=T))
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
path = 'D:/BaiduYunDownload/data'
files = list.files(
path,pattern = pattern ,recursive = T,ignore.case = T,full.names = T
)
files = list.files(
path,pattern = 'DLb01.*' ,recursive = T,ignore.case = T,full.names = T
)
files
soybean_b = list(contract=c('dlb01','dlb03','dlb05','dlb07','dlb09','dlb11'),main='dlbmi',symbol='dlb')
source('src/config/include.R',encoding='utf-8')
source('src/config/db_config.R',encoding='utf-8')
mydb = 'china_future_ods_m'
mydb_day = 'china_future_ods_day'
search_path = 'D:/BaiduYunDownload/data'
overwrite = T
corp = list(c('dlc01','DLC01.*'),c('dlc03','DLC03.*'),c('dlc05','DLC05.*'),c('dlc07','DLC07.*'),c('dlc09','DLC09.*'),c('dlc11','DLC11.*'))
soybean_a = list(c('dlax01','DLAX01.*'),c('dlax03','DLAX03.*'),c('dlax05','DLAX05.*'),c('dlax07','DLAX07.*'),c('dlax09','DLAX09.*'),c('dlax11','DLAX11.*'),
c('dlay01','DLAY01.*'),c('dlay03','DLAY03.*'),c('dlay05','DLAY05.*'),c('dlay07','DLAY07.*'),c('dlay09','DLAY09.*'),c('dlay11','DLAY11.*'))
soybean_b = list(c('dlb01','DLb01.*'),c('dlb03','DLb03.*'),c('dlb05','DLb05.*'),c('dlb07','DLb07.*'),c('dlb09','DLb09.*'),c('dlb11','DLb11.*'))
symbols = list(soybean_b)
for(i in 1:length(symbols))
{
coms = symbols[[i]]
for(com in coms)
{
tbname = com[1]
pattern = com[2]
print(com[1])
data = collectdatafromtaobao(search_path,pattern)
daydata = to_day(data)
data = as.data.frame(data)
data$datetime = rownames(data)
daydata = as.data.frame(daydata)
daydata$datetime = rownames(daydata)
writeToMysqltable(data,mydb,tbname,overwrite)
writeToMysqltable(daydata,mydb_day,tbname,overwrite)
}
}
source('src/dw/collectdata/collectfromtaobao.R')
source('src/dw/collectdata/collectfromtaobao.R',encoding='utf-8')
source('src/config/include.R',encoding='utf-8')
source('src/config/db_config.R',encoding='utf-8')
source('src/dw/collectdata/collectfromtaobao.R',encoding='utf-8')
mydb = 'china_future_ods_m'
mydb_day = 'china_future_ods_day'
search_path = 'D:/BaiduYunDownload/data'
overwrite = T
corp = list(c('dlc01','DLC01.*'),c('dlc03','DLC03.*'),c('dlc05','DLC05.*'),c('dlc07','DLC07.*'),c('dlc09','DLC09.*'),c('dlc11','DLC11.*'))
soybean_a = list(c('dlax01','DLAX01.*'),c('dlax03','DLAX03.*'),c('dlax05','DLAX05.*'),c('dlax07','DLAX07.*'),c('dlax09','DLAX09.*'),c('dlax11','DLAX11.*'),
c('dlay01','DLAY01.*'),c('dlay03','DLAY03.*'),c('dlay05','DLAY05.*'),c('dlay07','DLAY07.*'),c('dlay09','DLAY09.*'),c('dlay11','DLAY11.*'))
soybean_b = list(c('dlb01','DLb01.*'),c('dlb03','DLb03.*'),c('dlb05','DLb05.*'),c('dlb07','DLb07.*'),c('dlb09','DLb09.*'),c('dlb11','DLb11.*'))
symbols = list(soybean_b)
for(i in 1:length(symbols))
{
coms = symbols[[i]]
for(com in coms)
{
tbname = com[1]
pattern = com[2]
print(com[1])
data = collectdatafromtaobao(search_path,pattern)
daydata = to_day(data)
data = as.data.frame(data)
data$datetime = rownames(data)
daydata = as.data.frame(daydata)
daydata$datetime = rownames(daydata)
writeToMysqltable(data,mydb,tbname,overwrite)
writeToMysqltable(daydata,mydb_day,tbname,overwrite)
}
}
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
source('src/config/include.R',encoding='utf-8')
dbname = 'china_future_ods_m'
tbname = 'dlc01'
data = getTableData(dbname,tbname)
data = xts(data[,c('Open','High','Low','Close','Vol','Oi')],order.by=as.POSIXct(data$datetime,format='%Y-%m-%d %H:%M:%S'))
data = to_minutes(data,15)
data1 = data
data$Close
data$Open
time = as.character(index(data))
time = substr(time,12,19)
votile = data$Close - data$Open
votile
votile$time = time
votile
time
votile = data$Close - data$Open
colbind(votile,time)
cbind(votile,time)
votile = as.data.frame(data$Close - data$Open)
votile$time = time
votile
?melt
head(votile)
dcast(votile,Close~ time)
xx = dcast(votile,Close~ time)
head(xx)
colnames(xx)
head(x)
head(votile)
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
aqm
head(aqm)
head(dcast(aqm, month ~ variable, mean, margins = c("month", "variable"))
)
?dcas
?dcast
require(data.table)
names(ChickWeight) <- tolower(names(ChickWeight))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
head(DT)
head(dcast(DT, time ~ variable, fun=mean)
)
head(votile)
head(dcast(DT,  ~ variable, fun=mean)
)
as.character(as.Date(index(votile)))
votile$day = as.character(as.Date(index(votile)))
xx = dcast(votile,day~ time)
xx
xx = dcast(votile,day ~ time)
head(xx)
xx = dcast(votile,day ~ time,value.var=Close)
xx = dcast(votile,day ~ time,value.var='Close')
xx
head(xx)
head(votile)
head(votile)
as.character(as.Date(index(votile)))
index(votile)
votile$day = as.character(as.Date(rowname(votile)))
rownames(votile)
votile$day = as.character(as.Date(rownames(votile)))
votile
xx = dcast(votile,day ~ time,value.var='Close')
head(xx)
ncol(xx)
xx[,1:2]
xx[,2:]
xx[,2:ncol(xx)]
xx = xx[,2:ncol(xx)]
?kmeans
kmeans(xx,5)
fit = kmeans(xx,5)
fit$centers
centers = fit$centers
centers[,]
centers[1,]
plot(centers[1,])
plot(centers[2,])
plot(centers[3,])
plot(centers[4,])
plot(centers[5,])
plot(centers[1,])
plot(centers[2,])
head(votile)
fit = kmeans(xx,10)
centers = fit$centers
plot(center[1,])
plot(centers[1,])
plot(centers[2,])
plot(centers[3,])
plot(centers[4,])
plot(centers[5,])
plot(centers[6,])
dbname = 'china_future_ods_m'
tbname = 'dlcmi'
data = getTableData(dbname,tbname)
data = xts(data[,c('Open','High','Low','Close','Vol','Oi')],order.by=as.POSIXct(data$datetime,format='%Y-%m-%d %H:%M:%S'))
data = to_minutes(data,15)
time = as.character(index(data))
time = substr(time,12,19)
votile = as.data.frame(data$Close - data$Open)
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
xx = dcast(votile,day ~ time,value.var='Close')
xx = xx[,2:ncol(xx)]
fit = kmeans(xx,10)
centers = fit$centers
fit = kmeans(xx,5)
centers = fit$centers
plot(centers[1,])
plot(centers[2,])
?kmeans
fit = kmeans(xx,5,iter.max = 100)
centers = fit$centers
plot(centers[2,])
plot(centers[1,])
plot(centers[2,])
?options
p = par(mfrow=c(5,1))
centers = fit$centers
plot(centers[2,])
p = par(mfrow=c(5,5))
centers = fit$centers
plot(centers[2,])
?window
?windows
windows(400,800)
p = par(mfrow=c(5,5))
centers = fit$centers
plot(centers[2,])
windows(400,800)
p = par(mfrow=c(5,5))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
for( i in 1:5)
{
plot(centers[i,])
}
windows(800,800)
p = par(mfrow=c(5,1))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
p = par(mfrow=c(5,1))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
i = 1
plot(centers[i,])
centers
fit = kmeans(xx,10,iter.max = 100)
centers = fit$centers
centers
fit$cluster
labels = fit$centers
which(lables == 3)
labels = fit$centers
which(labels == 3)
labels
labels = fit$cluster
which(labels == 3)
plot(xx[index[1],])
xx
index[1]
index = which(labels == 3)
index[1]
plot(xx[index[1],])
xx[index[1],]
plot(xx[index[1],])
plot(as.numeric(xx[index[1],]))
plot(as.numeric(xx[index[1],]))
windows(800,800)
plot(as.numeric(xx[index[1],]))
?plot
points(as.numeric(xx[index[1],])
)
plot(as.numeric(xx[index[1],]))
windows(800,800)
plot(as.numeric(xx[index[1],]))
points(as.numeric(xx[index[1],]))
points(as.numeric(xx[index[2],]))
windows(800,800)
plot(as.numeric(xx[index[1],]),type='l',color = 'red')
points(as.numeric(xx[index[2],])，type='l',color = 'yellow')
?plot
plot(as.numeric(xx[index[1],]),type='l',col = 'red')
points(as.numeric(xx[index[2],])，type='l',col = 'yellow')
points(as.numeric(xx[index[2],]),type='l',col = 'yellow')
windows(800,800)
plot(as.numeric(xx[index[1],]),type='l',col = 'red')
points(as.numeric(xx[index[2],]),type='l',col = 'blue')
windows(800,800)
plot(centers[3,],type='l',col = 'green')
plot(as.numeric(xx[index[1],]),type='l',col = 'red')
points(as.numeric(xx[index[2],]),type='l',col = 'blue')
points(as.numeric(xx[index[2],]),type='l',col = 'blue')
windows(800,800)
plot(centers[3,],type='l',col = 'green')
points(as.numeric(xx[index[1],]),type='l',col = 'red')
points(as.numeric(xx[index[2],]),type='l',col = 'blue')
fit = kmeans(xx,5,iter.max = 100)
centers = fit$centers
centers
?svm
votile
head()
head(xx)
xx$lable = lables
xx$lable = labels
svm(lable~.,data=xx)
votile = as.data.frame(data$High - data$Open)
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
xx = dcast(votile,day ~ time,value.var='Close')
xx = xx[,2:ncol(xx)]
votile = as.data.frame(change = (data$High - data$Open))
votile = as.data.frame(data$High - data$Open)
colnames(votile)
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
xx = dcast(votile,day ~ time,value.var='change')
xx = xx[,2:ncol(xx)]
fit = kmeans(xx,5,iter.max = 100)
centers = fit$centers
centers
head(data)
head(data,10)
head(data,100)
