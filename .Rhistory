open_time = as.character(index(info))
stop_price = open_price - stop_point
profit_price = open_price + profit_point
clear_out = F
for(i in (k+1) : nrow(dayinfo))
{
currentbar = dayinfo[i,]
high = as.numeric(currentbar$High)
low = as.numeric(currentbar$Low)
open = as.numeric(currentbar$Open)
close = as.numeric(currentbar$Close)
time = as.character(index(currentbar))
#止损
if(low < stop_price)
{
out = stop_price
clear_out = T
cleartime = time
break
}
#止盈
if(high > profit_price)
{
out = profit_price
clear_out = T
cleartime = time
break
}
}
#是否定时出场
if(!clear_out)
{
out = close
cleartime = time
}
r = data.frame(opentime=open_time,open=open_price,cleartime=cleartime,close=out,type = type)
record = rbind(record,r)
}
record$profit = record$close - record$open
sum(record$profit)
sum(record$profit > 0) /length(record$profit)
xx_scaled = apply(xx,MARGIN=1,function(x){return(rbind(as.numeric(scale(as.numeric(x)))))})
xx_scaled = t(xx_scaled)
d = dist(xx_scaled,function(x,y){return(hausdorff_dist(x,y))})
d = dist(xx_scaled,function(x,y){d=dtw(x,y)
return(d$distance)})
d = dist(xx_scaled,function(x,y){x1 = matrix(c(1:15,x),ncol=2)
y1 = matrix(c(1:15,y),ncol=2)
return(Frechet(x1,y1))})
Sys.time()
d = as.matrix(d)
n = 6
clust = pam(d,n,diss=T)
centers_index = clust$medoids
centers = xx_scaled[centers_index,]
labels = clust$clustering
plot_centers(centers,n)
}
plot_centers = function(centers,n)
{
windows(1000,1000)
plot(centers[1,],type='l',ylim = range(max(centers),min(centers)),xlab='',xaxt = 'n') #ylim = range(-6,6)
axis(1, 1:length(centers[1,]),names(centers[1,]))
for( i in 2:n)
{
points(centers[i,],type='l',col=i)
}
}
?kmeans
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
colnames(x) <- c("x", "y")
x
Frechet
?Frechet
x
y = x
Frechet(x,y)
Frechet(x[1:10,],y[1:10,])
Frechet
traj1 = x
traj2 = y
TrajCheck(traj1, traj2)
is.character(trajTest)
trajTest <- TrajCheck(traj1, traj2)
is.character(trajTest)
dim(traj1)
dimensions <- dim(traj1)[2]
length1 <- dim(traj1)[1]
length2 <- dim(traj2)[1]
SinglePointCalc
getAnywhere(SinglePointCalc)
SinglePointCalc = function (traj1, traj2)
{
dimensions <- dim(traj1)[2]
length1 <- dim(traj1)[1]
length2 <- dim(traj2)[1]
leashSq <- -1
if (length1 == 1) {
for (point2 in 1:length2) {
newLeashSq <- DistanceSq(traj1[1, ], traj2[point2,
], dimensions)
if (newLeashSq > leashSq) {
leashSq <- newLeashSq
}
}
}
else if (length2 == 1) {
for (point1 in 1:length1) {
newLeashSq <- DistanceSq(traj1[point1, ], traj2[1,
], dimensions)
if (newLeashSq > leashSq) {
leashSq <- newLeashSq
}
}
}
if (leashSq >= 0) {
return(sqrt(leashSq))
}
else {
warning("Error in single point trajectory calculation.")
return("Error in single point trajectory calculation.")
}
}
SinglePointCalc(x[1,],y)
x[1,]
SinglePointCalc = function (traj1, traj2)
{
dimensions <- dim(traj1)[2]
length1 <- dim(traj1)[1]
length2 <- dim(traj2)[1]
leashSq <- -1
if (length1 == 1) {
for (point2 in 1:length2) {
newLeashSq <- DistanceSq(traj1[1, ], traj2[point2,
], dimensions)
if (newLeashSq > leashSq) {
leashSq <- newLeashSq
}
}
}
else if (length2 == 1) {
for (point1 in 1:length1) {
newLeashSq <- DistanceSq(traj1[point1, ], traj2[1,
], dimensions)
if (newLeashSq > leashSq) {
leashSq <- newLeashSq
}
}
}
if (leashSq >= 0) {
return(sqrt(leashSq))
}
else {
warning("Error in single point trajectory calculation.")
return("Error in single point trajectory calculation.")
}
}
SinglePointCalc(x[1,],y)
dim(x[1,])
dim(as.matrix(x[1,]))
dim(as.matrix(x[1,],nrow=1))
dim(as.matrix(x[1,],nrow=1))
SinglePointCalc(as.matrix(x[1,],nrow=1),y)
as.matrix(x[1,],nrow=1)
as.matrix(x[1,],ncol=1)
as.matrix(x[1,],ncol=2)
matrix(x[1,],ncol=2)
SinglePointCalc(matrix(x[1,],nrow=1),y)
DistanceSq
18 * 0.15
x
y
matrix(x[1,])
SinglePointCalc(matrix(x[1,],nrow=1),y)
SinglePointCalc(matrix(x[1,],nrow=1),y[1:2,])
x[1,]
y[1:2,]
(0.08285601-0.08285601)^2 + (0.25771392-0.25771392)^2
(0.08285601-0.13823307)^2 + (0.25771392-0.2971256)^2
sqrt(0.004619899)
y[1:3,]
(0.08285601-0.13823307)^2 + (0.25771392-0.2971256)^2 + (0.08285601+0.28620982)^2+(0.25771392-0.1192316)^2
sqrt(0.1600068)
SinglePointCalc(matrix(x[1,],nrow=1),y[1:3,])
x[1,] - y[1,]
x[1,] - y[2,]
Dot(x[1,] - y[2,])
getAnywhere(Dot)
install.packages('trajectories')
require(trajectories )
frechetDist
frechetDist(x,y)
?frechetDist
install.packages('TSclust')
install.packages('TSclust')
require(TSclust)
install.packages('wmtsa')
install.packages('wmtsa')
require(TSclust)
install.packages('pdc')
require(TSclust)
install.packages('locpol')
require(TSclust)
diss.FRECHET(1:10,1:10)
?diss.FRECHET
diss.FRECHET(x,y)
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface')
source('src/dw/collectdata/collectfromwind.R')
flat_time_data = function(data,diffclose=T,freq=15)
{
time = as.character(index(data))
time = substr(time,12,19)
times = get_day_trade_min_series(freq)
data_open = data[time %in% c('09:00:00'),]
data_open_votile = (data_open$Close - data_open$Open)
if(diffclose)
{
votile = as.data.frame(diff(data$Close))
votile = as.data.frame(data$Close)
#votile[time %in% c('09:00:00'),] = data_open_votile
}
else
{
votile = as.data.frame(data$Close - data$Open)
}
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
votile = subset(votile,time %in% times)
xx_dcast = dcast(votile,day ~ time,value.var='change')
return(xx_dcast)
}
cluster = function(xx,center_num=10,isplot=F,seed=1234)
{
if(seed !='')
{
set.seed(seed)
}
xx_scaled = scale(xx)
fit = kmpp(xx_scaled,center_num,iter.max = 50000,nstart=100)
centers = fit$centers
labels = fit$cluster
centers_unscaled = unscale(centers,xx_scaled)
centers = centers_unscaled
if(isplot)
{
windows(1000,1000)
plot(centers[1,],type='l',ylim = range(max(centers),min(centers)),xlab='',xaxt = 'n') #ylim = range(-6,6)
axis(1, 1:length(centers[1,]),names(centers[1,]))
for( i in 2:n)
{
points(centers[i,],type='l',col=i)
}
}
return(list(centers=centers,labels=labels ))
}
kmpp <- function(X, k,iter.max = 50000, nstart = 100) {
set.seed(1234)
n <- nrow(X)
C <- numeric(k)
C[1] <- sample(1:n, 1)
for (i in 2:k) {
dm <- distmat(X, X[C, ])
pr <- apply(dm, 1, min); pr[C] <- 0
C[i] <- sample(1:n, 1, prob = pr)
}
return(kmeans(X, X[C, ],iter.max = 50000, nstart = 100) )
}
predict_center = function(v,centers,k=9,isplot = F)
{
vv = v[1:k]
sample_centers = apply(centers,MARGIN = 1 ,function(x,k){return(x[1:k])},k)
sample_centers = t(sample_centers)
distance = apply(sample_centers,MARGIN = 1 ,function(x,v){dist(rbind(x,v))},vv)
min_index = which.min(distance)
if(isplot)
{
cen = as.numeric(centers[min_index,])
plot(v,col = 'blue',xlim=c(1,16),xaxt='n')
points(cen,col='red')
abline(h = 0,col='yellow')
axis(1, 1:length(centers[1,]),names(centers[1,]))
}
return(min_index)
}
basic_stats = function(xx,num_centers=15,k=9,centers,labels)
{
numcol = ncol(centers)
prlabels = apply(xx,MARGIN = 1,predict_center,centers,k)
dt_sep = data.frame()
dt = data.frame()
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
count = length(index)
point = label_data[,(k+1):numcol]
point_col_sum = apply(point,2,sum)
point_col_ratio = apply(point,2,function(x){sum(x>0)/sum(x!=0)})
point_col_sum = cbind(as.data.frame(t(point_col_sum)))
point_col_ratio = cbind(as.data.frame(t(point_col_ratio)))
colnames(point_col_sum) = paste(colnames(point_col_sum),'sum',sep='_')
colnames(point_col_ratio) = paste(colnames(point_col_ratio),'ratio',sep='_')
point_col = cbind(point_col_ratio,point_col_sum)
point_col = cbind(data.frame(center=i,count=count),point_col)
dt_sep = rbind(dt_sep,point_col)
point_sum = apply(point,1,sum)
total = sum(point_sum)
upratio = sum(point_sum>0)/sum(point_sum!=0)
pvalue = prop.test(count*upratio,count,0.55,alternative='greater')
uppvalue = pvalue$p.value
r = data.frame(center=i,sum = total,upratio = upratio,count,uppvalue=uppvalue)
dt = rbind(dt,r)
}
return(list(dt,dt_sep))
}
run =function()
{
dbname ='china_future_ods_m'
tbname = 'dlcmi'
freq = 15
data = getdata(dbname,tbname,freq)
num_centers = 10
seed = 2134
xx_dcast = flat_time_data(data,diffclose=T,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
indices = which(apply(xx,MARGIN=1,function(x)(all(as.numeric(x)==x[1]))))
xx=xx[-indices,]
numcol = ncol(xx)
point_total = xx[,1:numcol]
point_total_ratio_up = apply(point_total,2,function(x){sum(x>0)/sum(x!=0)})
point_total_ratio_down = apply(point_total,2,function(x){sum(x<0)/sum(x!=0)})
result = cluster(xx,num_centers,seed=seed)
centers = result[['centers']]
labels = result[['labels']]
xx_dcast = flat_time_data(data,diffclose=F,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
numcol = ncol(xx)
point_total = xx[,1:numcol]
point_total_ratio_up_op = apply(point_total,2,function(x){sum(x>0)/sum(x!=0)})
point_total_ratio_down_op = apply(point_total,2,function(x){sum(x<0)/sum(x!=0)})
result = cluster(xx,num_centers,seed=seed)
centers_op = result[['centers']]
labels_op = result[['labels']]
k = 9#length(v1)
dt_diffclose = basic_stats(xx,num_centers=num_centers,k=k,centers=centers,labels=labels)
dt_dc = dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
good_dt = subset(dt_dc, dt_dc$uppvalue < 0.05 )# & dt_dc$count > 100)
dt_open = basic_stats(xx,num_centers=num_centers,k=k,centers=centers_op,labels=labels_op)
dt_op = dt_open[[1]]
dt_op_sep = dt_open[[2]]
#获取实时数据并计算
pricedata = getWindData()
y = diff(pricedata$close)
y[1] = (pricedata[1,]$close - pricedata[1,]$open)
v1 = as.numeric(y)
y = pricedata$close - pricedata$open
v2 = as.numeric(y)
predict_center(v1,centers,k)
predict_center(v2,centers_op,k)
}
strategy_test = function()
{
record = data.frame()
k = 9
prlabels = apply(xx,MARGIN = 1,predict_center,centers,k)
long_data_label = which(prlabels == 6)
days = as.character(xx_dcast[long_data_label,1])
stop_point = 15
profit_point = 15
type = 'long'
for(day in days)
{
dayinfo = data[day]
info = dayinfo[(k+1),]
open_price = as.numeric(info$Open)
open_time = as.character(index(info))
stop_price = open_price - stop_point
profit_price = open_price + profit_point
clear_out = F
for(i in (k+1) : nrow(dayinfo))
{
currentbar = dayinfo[i,]
high = as.numeric(currentbar$High)
low = as.numeric(currentbar$Low)
open = as.numeric(currentbar$Open)
close = as.numeric(currentbar$Close)
time = as.character(index(currentbar))
#止损
if(low < stop_price)
{
out = stop_price
clear_out = T
cleartime = time
break
}
#止盈
if(high > profit_price)
{
out = profit_price
clear_out = T
cleartime = time
break
}
}
#是否定时出场
if(!clear_out)
{
out = close
cleartime = time
}
r = data.frame(opentime=open_time,open=open_price,cleartime=cleartime,close=out,type = type)
record = rbind(record,r)
}
record$profit = record$close - record$open
sum(record$profit)
sum(record$profit > 0) /length(record$profit)
xx_scaled = apply(xx,MARGIN=1,function(x){return(rbind(as.numeric(scale(as.numeric(x)))))})
xx_scaled = t(xx_scaled)
d = dist(xx_scaled,function(x,y){return(hausdorff_dist(x,y))})
d = dist(xx_scaled,function(x,y){d=dtw(x,y)
return(d$distance)})
d = dist(xx_scaled,function(x,y){x1 = matrix(c(1:15,x),ncol=2)
y1 = matrix(c(1:15,y),ncol=2)
return(Frechet(x1,y1))})
Sys.time()
d = as.matrix(d)
n = 6
clust = pam(d,n,diss=T)
centers_index = clust$medoids
centers = xx_scaled[centers_index,]
labels = clust$clustering
plot_centers(centers,n)
}
plot_centers = function(centers,n)
{
windows(1000,1000)
plot(centers[1,],type='l',ylim = range(max(centers),min(centers)),xlab='',xaxt = 'n') #ylim = range(-6,6)
axis(1, 1:length(centers[1,]),names(centers[1,]))
for( i in 2:n)
{
points(centers[i,],type='l',col=i)
}
}
dbname ='china_future_ods_m'
tbname = 'dlcmi'
freq = 15
data = getdata(dbname,tbname,freq)
num_centers = 10
seed = 2134
xx_dcast = flat_time_data(data,diffclose=T,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
indices = which(apply(xx,MARGIN=1,function(x)(all(as.numeric(x)==x[1]))))
xx=xx[-indices,]
xx_scaled = apply(xx,MARGIN=1,function(x){return(rbind(as.numeric(scale(as.numeric(x)))))})
xx_scaled = t(xx_scaled)
d = diss.FRECHET(xx_scaled[1,],xx_scaled[2,])
d
?link
?distFrechet
d = dist(xx_scaled,function(x,y){#x1 = matrix(c(1:15,x),ncol=2)
#y1 = matrix(c(1:15,y),ncol=2)
return(Frechet(x1,y1))})
d = dist(xx_scaled,function(x,y){#x1 = matrix(c(1:15,x),ncol=2)
#y1 = matrix(c(1:15,y),ncol=2)
return(Frechet(x,y))})
d = dist(xx_scaled[10,],function(x,y){#x1 = matrix(c(1:15,x),ncol=2)
#y1 = matrix(c(1:15,y),ncol=2)
return(Frechet(x,y))})
d
dist(xx_scaled[2,],function(x,y){#x1 = matrix(c(1:15,x),ncol=2)
#y1 = matrix(c(1:15,y),ncol=2)
return(Frechet(x,y))})
dist(xx_scaled[2,],function(x,y){#x1 = matrix(c(1:15,x),ncol=2)
#y1 = matrix(c(1:15,y),ncol=2)
return(distFrechet(x,y))})
dist(xx_scaled[2,],function(x,y){#x1 = matrix(c(1:15,x),ncol=2)
#y1 = matrix(c(1:15,y),ncol=2)
return(diss.FRECHET(x,y))})
xx_scaled[2,]
dist(xx_scaled[10,],function(x,y){#x1 = matrix(c(1:15,x),ncol=2)
#y1 = matrix(c(1:15,y),ncol=2)
return(diss.FRECHET(x,y))})
all_packages = c('quantmod','TTR','dygraphs','lubridate','dplyr','data.table','e1071','randomForest','rpart',
'rpart.plot','reshape2','dplyr','RCurl','rjson','XML2R','rsdmx','RMySQL','DMwR','TSclust',
'pracma','Matrix','arules','arulesSequences','WindR','proxy','pracma','cluster','dtw','SimilarityMeasures'
)
for(pack in all_packages)
{
if(!require(pack,character.only=T))
{
print('installing:')
print(pack)
install.packages(pack)
require(pack,character.only=T)
}
}
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
source('src/config/db_config.R',encoding='utf-8')
source('src/config/china_future_symbol.R',encoding='utf-8')
sourceDir('src/utilities',encoding='utf-8')
options(scipen =200)
