dayinfo_complete = rbind(dayinfo_complete,d2)
}
dayinfo_complete
days = unique(substring(hdf_f$DateUTC,1,10))
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,substring(hdf_f$DateUTC,1,10) == day)
if(nrow(dayinfo$hour) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
dayinfo_complete = data.frame()
for(i in 1:nrow(dayinfo))
{
d = dayinfo[i,]
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
dayinfo_complete = rbind(dayinfo_complete,d)
dayinfo_complete = rbind(dayinfo_complete,d1)
dayinfo_complete = rbind(dayinfo_complete,d2)
}
hdf_complete = rbind(hdf_complete,dayinfo_complete)
}
days = unique(substring(hdf_f$DateUTC,1,10))
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,substring(hdf_f$DateUTC,1,10) == day)
if(nrow(dayinfo) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
dayinfo_complete = data.frame()
for(i in 1:nrow(dayinfo))
{
d = dayinfo[i,]
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
dayinfo_complete = rbind(dayinfo_complete,d)
dayinfo_complete = rbind(dayinfo_complete,d1)
dayinfo_complete = rbind(dayinfo_complete,d2)
}
hdf_complete = rbind(hdf_complete,dayinfo_complete)
}
colnames(hdf_complete)[1] = 'Date'
hdf_complete
head(hdf_complete)
hdf_complete = hdf_complete[order(hdf_complete$Date),]
head(hdf_complete)
head(hdf_complete)
days = unique(substring(hdf_f$DateUTC,1,10))
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,substring(hdf_f$DateUTC,1,10) == day)
if(nrow(dayinfo) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
dayinfo_complete = data.frame()
for(i in 1:nrow(dayinfo))
{
d = dayinfo[i,]
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
dayinfo_complete = rbind(dayinfo_complete,d)
dayinfo_complete = rbind(dayinfo_complete,d1)
dayinfo_complete = rbind(dayinfo_complete,d2)
}
hdf_complete = rbind(hdf_complete,dayinfo_complete)
}
colnames(hdf_complete)[1] = 'Date'
hdf_complete$Date
hdf_complete
head(hdf_complete)
write.csv(hdf_complete,'d:/weatherdata.csv',row.names=F)
hdf <- getWeatherForDate('chengdu', start_date='2017-04-23', end_date = '2017-05-11',
opt_detailed=TRUE,
opt_all_columns=TRUE)
hdf =  hdf[,c('DateUTC','TemperatureC','Dew_PointC','Humidity','Sea_Level_PressurehPa','Wind_SpeedKm_h')]
hdf = hdf[order(hdf$DateUTC,decreasing = F),]
hdf_xts = xts(hdf,order.by = as.POSIXct(hdf$DateUTC))
hdf_xts = hdf_xts['2017-04-23/2017-05-11']
hour_seq = seq.POSIXt(as.POSIXct('2017-01-01'),as.POSIXct('2017-12-31'),by='hour')
hdf_f = hdf_xts[hour_seq,]
hdf_f = as.data.frame(hdf_f)
hdf_f
days = unique(substring(hdf_f$DateUTC,1,10))
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,substring(hdf_f$DateUTC,1,10) == day)
if(nrow(dayinfo) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
dayinfo_complete = data.frame()
for(i in 1:nrow(dayinfo))
{
d = dayinfo[i,]
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
dayinfo_complete = rbind(dayinfo_complete,d)
dayinfo_complete = rbind(dayinfo_complete,d1)
dayinfo_complete = rbind(dayinfo_complete,d2)
}
hdf_complete = rbind(hdf_complete,dayinfo_complete)
}
colnames(hdf_complete)[1] = 'Date'
hdf_complete
head(hdf_complete)
day
day = days[1]
dayinfo = subset(hdf_f,substring(hdf_f$DateUTC,1,10) == day)
if(nrow(dayinfo) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
dayinfo_complete = data.frame()
i  = 1
d = dayinfo[i,]
d
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
dateutc1
dateutc2
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
d1
d2
dayinfo_complete = data.frame()
for(i in 1:nrow(dayinfo))
{
d = dayinfo[i,]
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
dayinfo_complete = rbind(dayinfo_complete,d)
dayinfo_complete = rbind(dayinfo_complete,d1)
dayinfo_complete = rbind(dayinfo_complete,d2)
}
dayinfo_complete
days = unique(substring(hdf_f$DateUTC,1,10))
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,substring(hdf_f$DateUTC,1,10) == day)
if(nrow(dayinfo) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
dayinfo_complete = data.frame()
for(i in 1:nrow(dayinfo))
{
d = dayinfo[i,]
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
dayinfo_complete = rbind(dayinfo_complete,d)
dayinfo_complete = rbind(dayinfo_complete,d1)
dayinfo_complete = rbind(dayinfo_complete,d2)
}
hdf_complete = rbind(hdf_complete,dayinfo_complete)
}
colnames(hdf_complete)[1] = 'Date'
rownames(hdf_complete) = NULL
hdf_complete
write.csv(hdf_complete,'d:/weatherdata.csv',row.names=F)
hdf <- getWeatherForDate('chengdu', start_date='2017-04-23', end_date = '2017-05-26',
opt_detailed=TRUE,
opt_all_columns=TRUE)
hdf =  hdf[,c('DateUTC','TemperatureC','Dew_PointC','Humidity','Sea_Level_PressurehPa','Wind_SpeedKm_h')]
hdf = hdf[order(hdf$DateUTC,decreasing = F),]
hdf_xts = xts(hdf,order.by = as.POSIXct(hdf$DateUTC))
hdf_xts = hdf_xts['2017-04-23/2017-05-26']
hour_seq = seq.POSIXt(as.POSIXct('2017-01-01'),as.POSIXct('2017-12-31'),by='hour')
hdf_f = hdf_xts[hour_seq,]
hdf_f = as.data.frame(hdf_f)
days = unique(substring(hdf_f$DateUTC,1,10))
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,substring(hdf_f$DateUTC,1,10) == day)
if(nrow(dayinfo) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
dayinfo_complete = data.frame()
for(i in 1:nrow(dayinfo))
{
d = dayinfo[i,]
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
dayinfo_complete = rbind(dayinfo_complete,d)
dayinfo_complete = rbind(dayinfo_complete,d1)
dayinfo_complete = rbind(dayinfo_complete,d2)
}
hdf_complete = rbind(hdf_complete,dayinfo_complete)
}
colnames(hdf_complete)[1] = 'Date'
rownames(hdf_complete) = NULL
#hdf_complete = hdf_complete[order(hdf_complete$Date),]
write.csv(hdf_complete,'d:/weatherdata.csv',row.names=F)
addhour = function(dateutc,n=1)
{
hour = substring(dateutc,12,13)
hour = as.numeric(hour)+n
hour = ifelse(hour<10,paste('0',as.character(hour),sep=''),as.character(hour))
substring(dateutc,12,13) = hour
return(dateutc)
}
days = unique(substring(hdf_f$DateUTC,1,10))
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,substring(hdf_f$DateUTC,1,10) == day)
if(nrow(dayinfo) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
dayinfo_complete = data.frame()
for(i in 1:nrow(dayinfo))
{
d = dayinfo[i,]
dateutc =as.character(d$DateUTC)
dateutc1 = addhour(dateutc,1)
dateutc2 = addhour(dateutc,2)
d1 = d
d1$DateUTC = dateutc1
d2 = d
d2$DateUTC = dateutc2
dayinfo_complete = rbind(dayinfo_complete,d)
dayinfo_complete = rbind(dayinfo_complete,d1)
dayinfo_complete = rbind(dayinfo_complete,d2)
}
hdf_complete = rbind(hdf_complete,dayinfo_complete)
}
colnames(hdf_complete)[1] = 'Date'
rownames(hdf_complete) = NULL
#hdf_complete = hdf_complete[order(hdf_complete$Date),]
write.csv(hdf_complete,'d:/weatherdata.csv',row.names=F)
help(package='weatherData')
getCurrentTemperature('chengdu')
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
nbarframework = function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 30
losspoint = 10
n = 3
pred = data[1,]
for(i in 2:nrow(data))
{
#print(i)
d = data[i,]
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,pred)
position$update(d,nbarstate)
nbarstate$update(d)
pred = d
}
records = position$records
basic_analysis(records)
}
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 20
losspoint = 10
n = 3
pred = data[1,]
for(i in 2:nrow(data))
{
#print(i)
d = data[i,]
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,pred)
position$update(d,nbarstate)
nbarstate$update(d)
pred = d
}
records = position$records
basic_analysis(records)
nrow(records)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 10
losspoint = 10
n = 3
pred = data[1,]
for(i in 2:nrow(data))
{
#print(i)
d = data[i,]
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,pred)
position$update(d,nbarstate)
nbarstate$update(d)
pred = d
}
records = position$records
basic_analysis(records)
atr = ATR(data,20)
sma = SMA(data$Cl,20)
atr = atr$atr
atr
data$atr = atr
data$sma = sma
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface')
source('src/dw/collectdata/collectfromwind.R')
sourceDir('src/algorithm')
plot_sma = function(data,start='',end='')
{
perd = paste(start,end,sep='/')
plot_data = data[perd]
chartSeries(plot_data)
addTA(plot_data$sma,on=1)
}
judege_time = function(datetime,expectedtime)
{
time = substring(as.character(datetime),12,19)
if(time == expectedtime)
return(T)
else
return(F)
}
find_top = function(ds)
{
return(max(as.numeric(ds$High)))
}
find_bottom = function(ds)
{
return(min(as.numeric(ds$Low)))
}
openstratyge = function(d,position,pred,losspoint=10,winpoint=10,n=0)
{
time = as.character(index(d))
opentime = as.character(index(d))
expectedtime = '09:00:00'
open = as.numeric(d$Open)
curpostion = position
# print(curpostion)
prehigh = find_top(pred) + n
prelow = find_bottom(pred) - n
high = as.numeric(d$High)
low = as.numeric(d$Low)
if(judege_time(opentime,expectedtime))
{
if(high > prehigh)
{
op = ifelse(open > prehigh,open,prehigh)
stoploss = op - losspoint
stopwin = op + winpoint
r = data.frame(opentime=time,closetime=NA,open=op,close=NA,stopwin=stopwin,stoploss=stoploss,type='long',exittype='')
trade = Trade$new(r,stopwin=defaultstopwin,stoploss=defaultstoploss)
curpostion$add(trade)
}
if( low < prelow)
{
op = ifelse(open < prelow,open,prelow)
stoploss = op + losspoint
stopwin = op - winpoint
r = data.frame(opentime=time,closetime=NA,open=op,close=NA,stopwin=stopwin,stoploss=stoploss,type='short',exittype='')
trade = Trade$new(r,stopwin=defaultstopwin,stoploss=defaultstoploss)
curpostion$add(trade)
}
}
# print(curpostion)
return(curpostion)
}
openshockframework = function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
n = 3
position = Position$new()
winpoint = 5
losspoint = 5
pred = data[(1:n),]
for(i in (n+1):nrow(data))
{
d = data[i,]
position = openstratyge(d,position,pred,losspoint=losspoint,winpoint=winpoint)
position$update(d)
pred = data[(i-n):i,]
}
records = position$records
basic_analysis(records)
}
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
require('weatherData')
library(plyr)
hdf <- getWeatherForDate('chengdu', start_date='2017-04-23', end_date = '2017-05-26',
opt_detailed=TRUE,
opt_all_columns=TRUE)
hdf =  hdf[,c('DateUTC','TemperatureC','Dew_PointC','Humidity','Sea_Level_PressurehPa','Wind_SpeedKm_h')]
head(head)
hdf
help(predict)
?lm
require(forecast)
ets
?ets
fit <- ets(USAccDeaths)
forecast(fit)
forecast(fit,2)
x = forecast(fit,2)
x$mean
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
nbarframework = function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 10
losspoint = 10
n = 3
pred = data[1,]
for(i in 2:nrow(data))
{
#print(i)
d = data[i,]
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,pred)
position$update(d,nbarstate)
nbarstate$update(d)
pred = d
}
records = position$records
basic_analysis(records)
}
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
