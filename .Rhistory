for(i in 1:len)
{
trade = trades[[i]]
flag = trade$update(d,state,iswinfirst,...)
if(flag)
{
removeset = c(removeset,i)
self$records = rbind(self$records,trade$record)
}
}
stayset = setdiff(1:len,removeset)
self$tradeset = self$tradeset[stayset]
return(T)
},
getRecords = function()
{
records = self$records
profit = ifelse(records$type == 'long',(records$close - records$open),(records$open - records$close))
records$exittype = ifelse(profit>0,'win','loss')
records = xts(records,as.POSIXct(records$opentime,format = '%Y-%m-%d %H:%M:%S'))
return(records)
}
)
)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
#data$atr = ATR(data,10)$atr
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
prepeakn = 2
predpeak = data[1:prepeakn,]
for(i in (prepeakn+1):nrow(data))
{
#print(i)
state = list(nbstate =nbarstate,pred = predpeak )
d = data[i,]
#atr = floor(as.numeric(d$atr))
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,predpeak)
position$update(d,state,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
predpeak = data[(i-prepeakn+1):i,]
}
records = position$records
records = position$getRecords()
basic_analysis(position$records)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
prepeakn = 4
predpeak = data[1:prepeakn,]
for(i in (prepeakn+1):nrow(data))
{
#print(i)
state = list(nbstate =nbarstate,pred = predpeak )
d = data[i,]
#atr = floor(as.numeric(d$atr))
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,predpeak)
position$update(d,state,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
predpeak = data[(i-prepeakn+1):i,]
}
records = position$records
records = position$getRecords()
basic_analysis(position$records)
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
nbarframework = function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
#data$atr = ATR(data,10)$atr
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
prepeakn = 4
predpeak = data[1:prepeakn,]
for(i in (prepeakn+1):nrow(data))
{
#print(i)
state = list(nbstate =nbarstate,pred = predpeak )
d = data[i,]
#atr = floor(as.numeric(d$atr))
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,predpeak)
position$update(d,state,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
predpeak = data[(i-prepeakn+1):i,]
}
records = position$records
records = position$getRecords()
basic_analysis(position$records)
}
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
prepeakn = 4
predpeak = data[1:prepeakn,]
for(i in (prepeakn+1):nrow(data))
{
#print(i)
state = list(nbstate =nbarstate,pred = predpeak )
d = data[i,]
#atr = floor(as.numeric(d$atr))
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,predpeak)
position$update(d,state,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
predpeak = data[(i-prepeakn+1):i,]
}
records = position$records
records = position$getRecords()
basic_analysis(position$records)
defaultstoploss = function(r,d,state=NULL)
{
stoploss = r$stoploss
type = r$type
high = as.numeric(d$High) #as.numeric(d$Close)
low = as.numeric(d$Low)#as.numeric(d$Close)
time = as.character(index(d))
newr = r
flag = F
if(type == 'long')
{
if(low <= stoploss)
{
newr$closetime = time
newr$close = stoploss#stoploss
newr$exittype = 'longloss'
flag = T
}
}
else if(type == 'short')
{
if(high >= stoploss)
{
newr$closetime = time
newr$close =  stoploss#stoploss
newr$exittype = 'shortloss'
flag = T
}
}
result = list(flag = flag,r = newr)
return(result)
}
defaultstopwin = function(r,d,state=NULL)
{
stopwin = r$stopwin
type = r$type
high = as.numeric(d$High)
low = as.numeric(d$Low)
time = as.character(index(d))
newr = r
flag = F
if(type == 'long')
{
if(high >= stopwin)
{
newr$closetime = time
newr$close = stopwin
newr$exittype = 'longwin'
flag = T
}
}
else if(type == 'short')
{
if(low <= stopwin)
{
newr$closetime = time
newr$close = stopwin
newr$exittype = 'shortwin'
flag = T
}
}
result = list(flag = flag,r = newr)
return(result)
}
moveStopByPrePeak = function(r,d,state)
{
pred = state[['pred']]
type = r$type
prehigh = max(as.numeric(pred$High))
prelow =  min(as.numeric(pred$Low))
line = trunc((prehigh+prelow)/2)
if(type == 'long')
{
r$stoploss = prelow-1
}
else if(type == 'short')
{
r$stoploss = prehigh + 1
}
return(r)
}
MoveFixPoints =  R6Class('MoveFixPoints',
public = list(
barstate = NULL,
initialize = function(barstate)
{
self$barstate = barstate
},
update = function(r,d,state=NULL)
{
open = r$open
type = r$type
profit_long = self$barstate$curhigh - open
profit_short = open - self$barstate$curlow
if(type == 'long')
{
if(profit_long>10)
{
r$stoploss = open
r$stoploss = r$stoploss + profit_long-9
}
}
else if(type == 'short')
{
if(profit_short>10)
{
r$stoploss = open
r$stoploss = r$stoploss - profit_short + 9
}
}
self$barstate$update(d)
return(r)
}
)
)
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
nbarframework = function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
#data$atr = ATR(data,10)$atr
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
prepeakn = 4
predpeak = data[1:prepeakn,]
for(i in (prepeakn+1):nrow(data))
{
#print(i)
state = list(nbstate =nbarstate,pred = predpeak )
d = data[i,]
#atr = floor(as.numeric(d$atr))
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,predpeak)
position$update(d,state,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
predpeak = data[(i-prepeakn+1):i,]
}
records = position$records
records = position$getRecords()
basic_analysis(position$records)
}
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
#data$atr = ATR(data,10)$atr
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
prepeakn = 4
predpeak = data[1:prepeakn,]
for(i in (prepeakn+1):nrow(data))
{
#print(i)
state = list(nbstate =nbarstate,pred = predpeak )
d = data[i,]
#atr = floor(as.numeric(d$atr))
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,predpeak)
position$update(d,state,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
predpeak = data[(i-prepeakn+1):i,]
}
records = position$records
records = position$getRecords()
basic_analysis(position$records)
records
records['2015']
vis_bar(data['2015'])
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
nbarframework = function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
#data$atr = ATR(data,10)$atr
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
prepeakn = 4
predpeak = data[1:prepeakn,]
for(i in (prepeakn+1):nrow(data))
{
#print(i)
state = list(nbstate =nbarstate,pred = predpeak )
d = data[i,]
#atr = floor(as.numeric(d$atr))
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,predpeak)
position$update(d,state,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
predpeak = data[(i-prepeakn+1):i,]
}
records = position$records
records = position$getRecords()
basic_analysis(position$records)
}
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
#data$atr = ATR(data,10)$atr
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
prepeakn = 4
predpeak = data[1:prepeakn,]
for(i in (prepeakn+1):nrow(data))
{
#print(i)
state = list(nbstate =nbarstate,pred = predpeak )
d = data[i,]
#atr = floor(as.numeric(d$atr))
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,predpeak)
position$update(d,state,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
predpeak = data[(i-prepeakn+1):i,]
}
records = position$records
records = position$getRecords()
basic_analysis(position$records)
records['2014']
28-11+1.5
28-11+1.5+5
sub = records['2014']
subset(sub,exittype='loss')
subset(sub,exittype=='loss')
sub
vis_bar(data['2014'])
profit = ifelse(records$type == 'long',(records$close - records$open),(records$open - records$close))
records = position$records
profit = ifelse(records$type == 'long',(records$close - records$open),(records$open - records$close))
records = position$getRecords()
profit
max(profit)
min(profit)
which(profit==255)
which(profit==-229)
records[24,]
records[1776,]
records[1476,]
which(profit > 50)
which(profit < -50)
which(profit > 100)
which(profit < -100)
records[43,]
profit = ifelse(records$type == 'long',(records$close - records$open),(records$open - records$close))
profit
records$profit = profit
records = position$records
profit = ifelse(records$type == 'long',(records$close - records$open),(records$open - records$close))
records$profit = profit
which(records$profit >１００)
which(records$profit > 100)
records[24,]
records[28,]
records[1682,]
which(records$profit > 100)
subset(records,profit<50 & profit > -50)
records = subset(records,profit<50 & profit > -50)
win_ratio = length(profit[profit>0])/length(profit)
years = substring(records$opentime,1,4)
anual_profit = aggregate(records$profit,by=list(years),sum)
colnames(anual_profit) = c('year','profit')
anual_len = aggregate(records$profit,by=list(years),length)
colnames(anual_len) = c('year','len')
anual_ratio = aggregate(records$profit,by=list(years),function(x){length(x[x>0])/length(x)})
colnames(anual_ratio) = c('year','ratio')
anual_record = merge(anual_profit,anual_len)
anual_record = merge(anual_record,anual_ratio)
#aggregate(records$profit,by=list(years),length)
anual_record$trueprofit = anual_record$profit - anual_record$len*0.8 - anual_record$len
anual_record$virtualprofit = anual_record$profit - anual_record$len*0.8
print(sum(anual_record$virtualprofit))
print(nrow(records))
print(win_ratio)
print(anual_record)
print(sum(anual_record$trueprofit))
sub = records['2013']
vis_bar(data['2013'])
records = position$records
records = position$getRecords()
sub = records['2013']
sub
Position = R6Class('Position',
public = list(
records = data.frame(),
tradeset = list(),
add = function(trade)
{
self$tradeset = append(self$tradeset,trade)
},
update = function(d,state=NULL,iswinfirst=T,...)
{
trades = self$tradeset
len = length(trades)
removeset = c()
flag = F
if(len == 0)
return(T)
for(i in 1:len)
{
trade = trades[[i]]
flag = trade$update(d,state,iswinfirst,...)
if(flag)
{
removeset = c(removeset,i)
self$records = rbind(self$records,trade$record)
}
}
stayset = setdiff(1:len,removeset)
self$tradeset = self$tradeset[stayset]
return(T)
},
getRecords = function()
{
records = self$records
profit = ifelse(records$type == 'long',(records$close - records$open),(records$open - records$close))
records$exittype = ifelse(profit>0,'win','loss')
records$profit = profit
records = xts(records,as.POSIXct(records$opentime,format = '%Y-%m-%d %H:%M:%S'))
return(records)
}
)
)
