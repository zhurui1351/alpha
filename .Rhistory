if(substring(code,1,1) == 3) next
stock = get(code)
currentprice = stock[date]
if(nrow(currentprice) == 0 )
next
close = as.numeric(currentprice$Close)
sma =  as.numeric(currentprice$sma)
atr =  as.numeric(currentprice$atr)
#过滤价格
if(!(close >= lowprice && close <= highprice))
next
stock = na.omit(stock)
len = nrow(stock)
status = get_state(stock[(len-100):len])
if(status[date] == 'down') next
i = which(index(stock) == date)
preday_data = stock[(i-1),]
predate = index(preday_data)
preday_status = status[predate]
if((sma - close)/atr > 2 || (sma - close)/atr < -2)
next
if(preday_status == 'down' && status[date] == 'osi_down')
{
satisfied_stocks = c(satisfied_stocks,code)
}
}
satisfied_stocks
readSHindex = function()
{
path = "D:/data/stock/index/dest"
#Sys.setenv(TZ="UTC")
f='SH000001.TXT'
fname = file.path(path,f)
shindex = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
colnames(shindex)<-c("Open","High","Low","Close","Volume","Amount")
# time(shindex)=as.POSIXct(time(shindex))
shindex=as.xts(shindex)
shindex$sma = SMA(Cl(shindex),n=sman)
shindex$atr = ATR(HLC(shindex),n=atrn)$atr
pricedata = na.omit(shindex)
return(shindex)
}
shindex = readSHindex()
readallstock = function(sman=30,atrn = 30)
{
require('dplyr')
print(now())
e = parent.env(environment())
lookups = c()
indexlookups =  1
path = "D:/data/stock/dest"
files = dir(path)
rm(list=files,envir=e)
lookups = c()
indexlookups =  1
for(f in files)
{
#print(f)
fname = file.path(path,f)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
if(nrow(pricedata) < 500){ next}
colnames(pricedata)<-c("Open","High","Low","Close","Volume","Amount")
#time(pricedata)=as.POSIXct(time(pricedata))
pricedata=as.xts(pricedata)
pricedata$sma = SMA(Cl(pricedata),n=sman)
pricedata$atr = ATR(HLC(pricedata),n=atrn)$atr
pricedata = na.omit(pricedata)
#  rs = RS(Cl(shindex),Cl(pricedata))
# rs[which(rs==Inf | rs == -Inf)] = 0
#  pricedata$rs = rs
fname = strsplit(f,'.',fixed=T)[[1]][1]
fname = substr(fname,3,8)
assign(fname,pricedata,envir=e)
lookups[indexlookups] =fname
indexlookups = indexlookups + 1
}
print(now())
return(lookups)
}
readallpuredata = function(period='days')
{
require('dplyr')
print(now())
e =parent.env(environment())
lookups = c()
indexlookups =  1
path = "D:/data/stock/dest"
files = dir(path)
rm(list=files,envir=e)
lookups = c()
indexlookups =  1
for(f in files)
{
fname = file.path(path,f)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
if(nrow(pricedata) < 500){ next}
colnames(pricedata)<-c("Open","High","Low","Close","Volume","Amount")
time(pricedata)=as.POSIXct(time(pricedata))
pricedata=as.xts(pricedata)
pricedata = to.period(pricedata,period)
fname = strsplit(f,'.',fixed=T)[[1]][1]
fname = substr(fname,3,8)
#print(fname)
assign(fname,pricedata,envir=e)
lookups[indexlookups] =fname
indexlookups = indexlookups + 1
}
print(now())
return(lookups)
}
readSHindex = function()
{
path = "D:/data/stock/index/dest"
#Sys.setenv(TZ="UTC")
f='SH000001.TXT'
fname = file.path(path,f)
shindex = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
colnames(shindex)<-c("Open","High","Low","Close","Volume","Amount")
# time(shindex)=as.POSIXct(time(shindex))
shindex=as.xts(shindex)
shindex$sma = SMA(Cl(shindex),n=sman)
shindex$atr = ATR(HLC(shindex),n=atrn)$atr
pricedata = na.omit(shindex)
return(shindex)
}
shindex = readSHindex(sman=30,atrn = 30)
readallstock = function(sman=30,atrn = 30)
{
require('dplyr')
print(now())
e = parent.env(environment())
lookups = c()
indexlookups =  1
path = "D:/data/stock/dest"
files = dir(path)
rm(list=files,envir=e)
lookups = c()
indexlookups =  1
for(f in files)
{
#print(f)
fname = file.path(path,f)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
if(nrow(pricedata) < 500){ next}
colnames(pricedata)<-c("Open","High","Low","Close","Volume","Amount")
#time(pricedata)=as.POSIXct(time(pricedata))
pricedata=as.xts(pricedata)
pricedata$sma = SMA(Cl(pricedata),n=sman)
pricedata$atr = ATR(HLC(pricedata),n=atrn)$atr
pricedata = na.omit(pricedata)
#  rs = RS(Cl(shindex),Cl(pricedata))
# rs[which(rs==Inf | rs == -Inf)] = 0
#  pricedata$rs = rs
fname = strsplit(f,'.',fixed=T)[[1]][1]
fname = substr(fname,3,8)
assign(fname,pricedata,envir=e)
lookups[indexlookups] =fname
indexlookups = indexlookups + 1
}
print(now())
return(lookups)
}
readallpuredata = function(period='days')
{
require('dplyr')
print(now())
e =parent.env(environment())
lookups = c()
indexlookups =  1
path = "D:/data/stock/dest"
files = dir(path)
rm(list=files,envir=e)
lookups = c()
indexlookups =  1
for(f in files)
{
fname = file.path(path,f)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
if(nrow(pricedata) < 500){ next}
colnames(pricedata)<-c("Open","High","Low","Close","Volume","Amount")
time(pricedata)=as.POSIXct(time(pricedata))
pricedata=as.xts(pricedata)
pricedata = to.period(pricedata,period)
fname = strsplit(f,'.',fixed=T)[[1]][1]
fname = substr(fname,3,8)
#print(fname)
assign(fname,pricedata,envir=e)
lookups[indexlookups] =fname
indexlookups = indexlookups + 1
}
print(now())
return(lookups)
}
readSHindex = function(sman=30,atrn = 30)
{
path = "D:/data/stock/index/dest"
#Sys.setenv(TZ="UTC")
f='SH000001.TXT'
fname = file.path(path,f)
shindex = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
colnames(shindex)<-c("Open","High","Low","Close","Volume","Amount")
# time(shindex)=as.POSIXct(time(shindex))
shindex=as.xts(shindex)
shindex$sma = SMA(Cl(shindex),n=sman)
shindex$atr = ATR(HLC(shindex),n=atrn)$atr
pricedata = na.omit(shindex)
return(shindex)
}
shindex = readSHindex(sman=30,atrn = 30)
shstatus = get_state(shindex)
shindex
head(shindex)
readSHindex = function(sman=30,atrn = 30)
{
path = "D:/data/stock/index/dest"
#Sys.setenv(TZ="UTC")
f='SH000001.TXT'
fname = file.path(path,f)
shindex = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
colnames(shindex)<-c("Open","High","Low","Close","Volume","Amount")
# time(shindex)=as.POSIXct(time(shindex))
shindex=as.xts(shindex)
shindex$sma = SMA(Cl(shindex),n=sman)
shindex$atr = ATR(HLC(shindex),n=atrn)$atr
shindex = na.omit(shindex)
return(shindex)
}
shindex = readSHindex(sman=30,atrn = 30)
shstatus = get_state(shindex)
rm(list=ls(all=T))
source('src/dw/interface/stock/readallstock.R',encoding='utf-8')
lookups = readallstock(sman=30,atrn = 30)
date = '2017-06-02'
lowprice = 15
highprice = 25
get_state = function(data)
{
allstatus = data.frame()
marketmaStatus = MarketMaStatus$new()
for(i in 1:nrow(data))
{
d = data[i,]
marketmaStatus$update(d)
status = marketmaStatus$status
r = data.frame(time = index(d),status=status)
allstatus = rbind(allstatus,r)
}
allstatus = xts(allstatus$status,order.by=allstatus$time)
return(allstatus)
}
shindex = readSHindex(sman=30,atrn = 30)
shstatus = get_state(shindex)
satisfied_stocks = c()
for(code in lookups)
{
if(substring(code,1,1) == 3) next
stock = get(code)
currentprice = stock[date]
if(nrow(currentprice) == 0 )
next
close = as.numeric(currentprice$Close)
sma =  as.numeric(currentprice$sma)
atr =  as.numeric(currentprice$atr)
#过滤价格
if(!(close >= lowprice && close <= highprice))
next
stock = na.omit(stock)
len = nrow(stock)
status = get_state(stock[(len-100):len])
if(status[date] == 'down') next
i = which(index(stock) == date)
preday_data = stock[(i-1),]
predate = index(preday_data)
preday_status = status[predate]
if((sma - close)/atr > 2 || (sma - close)/atr < -2)
next
if(preday_status == 'down' && status[date] == 'osi_down')
{
satisfied_stocks = c(satisfied_stocks,code)
}
}
MarketMaStatus = R6Class('MarketMaStatus',
public = list(
status = 'init',
# prestatus = 'init'
judge = Judge$new(),
upcount = 0,
downcount = 0,
update = function(d)
{
line = d$sma
atr = d$atr
#暂不考虑触发
#trigger_up = line + atr
#trigger_down = line - atr
if(self$judge$is_up_line(d,line))
{
self$upcount = self$upcount+1
self$downcount = 0
if(self$status == 'down')
{
self$status = 'osi_down'
}
if(self$upcount >= 5)
{
self$status = 'up'
}
}
else if(self$judge$is_down_line(d,line))
{
self$upcount = 0
self$downcount = self$downcount + 1
if(self$status == 'up')
{
self$status = 'osi_up'
}
if(self$downcount >= 5)
{
self$status = 'down'
}
}
else if(self$judge$is_cross_line(d,line))
{
self$upcount = 0
self$downcount = 0
if(self$status =='up' || self$status == 'down')
{
self$status = paste('osi',self$status,sep='_')
}
}
}
)
)
Judge = R6Class('Judge',
public = list(
is_up = function(data)
{
open = as.numeric(data$Open)
close = as.numeric(data$Close)
if(close > open)
return(T)
else
return(F)
},
is_down = function(data)
{
open = as.numeric(data$Open)
close = as.numeric(data$Close)
if(close < open)
return(T)
else
return(F)
},
is_cross = function(data)
{
open = as.numeric(data$Open)
close = as.numeric(data$Close)
if(open == close)
return(T)
else
return(F)
},
is_up_line = function(data,line)
{
low = as.numeric(data$Close)
if(low > line)
{
return(T)
}
else
{
return(F)
}
},
is_down_line = function(data,line)
{
high = as.numeric(data$High)
if(high < line)
{
return(T)
}
else
{
return(F)
}
},
is_cross_line = function(data,line)
{
high = as.numeric(data$High)
low = as.numeric(data$Close)
if(high >= line && low<=line)
{
return(T)
}
else
{
return(F)
}
}
))
MarketMaStatus = R6Class('MarketMaStatus',
public = list(
status = 'init',
# prestatus = 'init'
judge = Judge$new(),
upcount = 0,
downcount = 0,
update = function(d)
{
line = d$sma
atr = d$atr
#暂不考虑触发
#trigger_up = line + atr
#trigger_down = line - atr
if(self$judge$is_up_line(d,line))
{
self$upcount = self$upcount+1
self$downcount = 0
if(self$status == 'down')
{
self$status = 'osi_down'
}
if(self$upcount >= 5)
{
self$status = 'up'
}
}
else if(self$judge$is_down_line(d,line))
{
self$upcount = 0
self$downcount = self$downcount + 1
if(self$status == 'up')
{
self$status = 'osi_up'
}
if(self$downcount >= 5)
{
self$status = 'down'
}
}
else if(self$judge$is_cross_line(d,line))
{
self$upcount = 0
self$downcount = 0
if(self$status =='up' || self$status == 'down')
{
self$status = paste('osi',self$status,sep='_')
}
}
}
)
)
shindex = readSHindex(sman=30,atrn = 30)
shstatus = get_state(shindex)
satisfied_stocks = c()
for(code in lookups)
{
if(substring(code,1,1) == 3) next
stock = get(code)
currentprice = stock[date]
if(nrow(currentprice) == 0 )
next
close = as.numeric(currentprice$Close)
sma =  as.numeric(currentprice$sma)
atr =  as.numeric(currentprice$atr)
#过滤价格
if(!(close >= lowprice && close <= highprice))
next
stock = na.omit(stock)
len = nrow(stock)
status = get_state(stock[(len-100):len])
if(status[date] == 'down') next
i = which(index(stock) == date)
preday_data = stock[(i-1),]
predate = index(preday_data)
preday_status = status[predate]
if((sma - close)/atr > 2 || (sma - close)/atr < -2)
next
if(preday_status == 'down' && status[date] == 'osi_down')
{
satisfied_stocks = c(satisfied_stocks,code)
}
}
satisfied_stocks
shindex_w = to.weekly(shindex)
head(shindex)
shindex_w$sma = SMA(shindex_w$Close,30)
shindex_w$Close
head(shindex_w)
shindex_w$sma = SMA(Cl(shindex_w),30)
shindex_w$atr = ATR(shindex_w)
shindex_w = na.omit(shindex_w)
shstatus_w = get_state(shindex_w)
shindex_w
data = shindex_w
allstatus = data.frame()
marketmaStatus = MarketMaStatus$new()
1:nrow(data)
i = 1
d = data[i,]
marketmaStatus$update(d)
d
shindex_w = to.weekly(shindex)
shindex_w$sma = SMA(Cl(shindex_w),30)
shindex_w$atr = ATR(shindex_w)$atr
shindex_w = na.omit(shindex_w)
shstatus_w = get_state(shindex_w)
head(shstatus_w)
head(shstatus_w)
head(shindex_w)
?to.weekly
to.weekly
