rollapply(data,50,function(x){ x=adf.test(x) })
rollapply(data,50,function(x){ x=adf.test(x)
return(x))}
rollapply(data[1:500],50,function(x){ x=adf.test(x)
return(x$p.value)}
)
data[1:500]
sma[1:500]
as.numeric(sma)
as.numeric(sma)[1:50]
rollapply(data[1:500],50,function(x){ x=adf.test(x);return(x);}
)
rollapply(data[1:500],50,function(x){ x=adf.test(as.numeric(x));return(x);})
rollapply(data[1:500],100,function(x){ x=adf.test(as.numeric(x));return(x);})
rollapply(sma[1:500],100,function(x){ x=adf.test(as.numeric(x));return(x);})
rollapply(sma[1:500],50,function(x){ p=adf.test(as.numeric(x));return(p$p.value);})
result = rollapply(sma,50,function(x){ p=adf.test(as.numeric(x));return(p$p.value);})
result
data['2007-06-25 13:45:00']
plot(data['2007-06-25/2007-06-25 13:45:00'])
result[1000:2000]
plot(data['2005-04-12/2005-04-12 14:15:00'])
data['2005-04-12/2005-04-12 14:15:00']
plot(sma['2005-04-12/2005-04-12 14:15:00'])
sma['2005-04-12/2005-04-12 14:15:00']
result
sma[100:200]
sma[100:150]
adf.test(sma[100:150])
plot(sma[100:150])
lm(sma(100:150))
lm(sma[100:150])
ar(sma[100:150])
sma[100:150]
ar(1:100)
x = ar(sma[100:150])
x$ar
result = rollapply(sma,50,function(x){ p=ar(as.numeric(x));return(p$ar);})
resultar = rollapply(sma,50,function(x){ p=ar(as.numeric(x));return(p$ar);})
ar(as.numeric(sma))
?ar
ar(as.numeric(sma),order.max=1)
resultar = rollapply(sma,50,function(x){ p=ar(as.numeric(x),order.max=1);return(p$ar);})
resultar
resultar[resultar<0]
resultar<0
which(resultar<0)
100:1
ar(100:1)
x=scale(1:100)
y = scale(sma[300:400])
y
x
lm(y~x)
length(y)
y = scale(sma[300:399])
pie
？pie
?pie
pie(12534,15319)
pie(c(12534,15319))
pie(c(12534,15319),lables = c('女生','男生'))
pie(rep(1, 24), col = rainbow(24), radius = 0.9)
pie(rep(1, 24), col = rainbow(24), radius = 0.9)
pie(c(12534,15319),lables = c('女生','男生'),col = rainbow(24), radius = 0.9)
pie(c(12534,15319),labels = c('女生','男生'),col = rainbow(24), radius = 0.9)
pie(c(12534,15319),labels = c('女生','男生'),col = rainbow(24), radius = 0.9,main='xingbie')
pie(c(12534,15319),labels = c('女生','男生'),col = rainbow(24), radius = 0.9,main='性别比')
pie(c(12534,15319),labels = c('女生','男生'),col = rainbow(2), radius = 0.9,main='性别')
pie(c(Sky = 78, "Sunny side of pyramid" = 17, "Shady side of pyramid" = 5),
init.angle = 315, col = c("deepskyblue", "yellow", "yellow3"), border = FALSE)
install.packages('RColorBrewer')
pie(c(2785,3899,19497,1671),labels = c('党员','预备党员','共青团员','群众'),col = rainbow(4), radius = 0.9,main='政治面貌')
pie(c(2507,5571,6963,6685,6128),labels = c('18以下','19','20','21','22以上'),col = rainbow(5), radius = 0.9,main='年龄分布')
pie(c(2507,5571,6963,6685,6128),labels = c('18以下','19岁','20岁','21岁','22岁以上'),col = rainbow(5), radius = 0.9,main='年龄分布')
pie(c(24068,918,779,279,1810),labels = c('汉族','回族','藏族','满族','其他民族'),col = rainbow(5), radius = 0.9,main='年龄分布')
p = par(nrow=c(2,2))
?par
p = par(mfrow=c(2,2))
pie(c(12534,15319),labels = c('女生','男生'),col = rainbow(2), radius = 0.9,main='性别')
pie(c(2785,3899,19497,1671),labels = c('党员','预备党员','共青团员','群众'),col = rainbow(4), radius = 0.9,main='政治面貌')
pie(c(2507,5571,6963,6685,6128),labels = c('18以下','19岁','20岁','21岁','22岁以上'),col = rainbow(5), radius = 0.9,main='年龄分布')
pie(c(24068,918,779,279,1810),labels = c('汉族','回族','藏族','满族','其他民族'),col = rainbow(5), radius = 0.9,main='民族分布')
?library(RColorBrewer)
?barplot
barplot(c(100,200))
barplot(c(127704,29000,17700,7700,2100))
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'))
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),args.legend = list(bty = "n",horiz = TRUE),
col = brewer.pal(5,"Set1"),
border = "white",ylim = c(0,100))
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),args.legend = list(bty = "n",horiz = TRUE),
col = mybarcol,
border = "white",ylim = c(0,100))
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),args.legend = list(bty = "n",horiz = TRUE),
col =  "gray20",
border = "white",ylim = c(0,100))
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),args.legend = list(bty = "n",horiz = TRUE),
col = 'red',
border = "white",ylim = c(0,100))
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),args.legend = list(bty = "n",horiz = TRUE),
border = "white",ylim = c(0,100))
barplot(VADeaths, border = "dark blue")
barplot(VADeaths, angle = 15+10*1:5, density = 20, col = "black",
legend = rownames(VADeaths))
title(main = list("Death Rates in Virginia", font = 4))
install.packages('RColorBrewer')
require(RColorBrewer)
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),args.legend = list(bty = "n",horiz = TRUE),
col=brewer.pal(24,"Set3"),
border = "white",ylim = c(0,100))
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),
col=brewer.pal(24,"Set3"),
border = "white")
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),
col=brewer.pal(24,"Set3"),  border = "white",main = '')
barplot(c(127704,29000,17700,7700,2100),legend.text=c('工业技术','医药学','文学','数学','哲学宗教'),
col=brewer.pal(24,"Set3"),  border = "white",main = '图书借阅排行')
barplot(c(6800,4195,3183,2968,3203),legend.text=c('竞赛获奖','创业实践','科研项目','出国交换','企业实习'),
col=brewer.pal(24,"Set3"),  border = "white",main = '学生实践活动分布')
barplot(c(3,15,23,32,21,6),legend.text=c('成绩拔尖','成绩突出','成绩优秀','成绩良好','成绩中下','成绩较差'),
col=brewer.pal(24,"Set3"),  border = "white",main = '成绩分布')
pie(c(4,15,65,12,4),labels = c('规律性极强','规律性较强','规律性一般','规律性较弱','规律性极弱'),col = rainbow(5), radius = 0.9,main='生活规律性分布')
?pie
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
sourceDir('src/dw/interface/stock',encoding='utf-8')
orgin_data = readSHindex()
head(orgin_data)
names = c('course_Variety','professional_cource','selected_cource','cource_bias','cource_hobby',
'practice','practice_major','practice_honor','party','out_party','out_win','time_room',
'time_lib','life_regular','books_amount','back_time','book_variety','time_internet',
'consum_freq','consum_level','consume_place','consum_amount','consum_type','job'
,'study_type')
length(colnames)
library("arulesViz")
data("Groceries")
test_data = Groceries
test_data = test_data[,1:length(colnames)]
colnames(test_data) = names
sets=eclat(test_data, parameter = list(support =0.05,maxlen=10))
rules <- apriori(test_data, parameter = list(support = 0.001, confidence = 0.5))
rules
names = c('course_Variety','professional_cource','selected_cource','cource_bias','cource_hobby',
'practice','practice_major','practice_honor','party','out_party','out_win','time_room',
'time_lib','life_regular','books_amount','back_time','book_variety','time_internet',
'consum_freq','consum_level','consume_place','consum_amount','consum_type','job'
,'study_type')
length(colnames)
library("arulesViz")
data("Groceries")
test_data = Groceries
test_data = test_data[,1:length(colnames)]
colnames(test_data) = names
names = c('course_Variety','professional_cource','selected_cource','cource_bias','cource_hobby',
'practice','practice_major','practice_honor','party','out_party','out_win','time_room',
'time_lib','life_regular','books_amount','back_time','book_variety','time_internet',
'consum_freq','consum_level','consume_place','consum_amount','consum_type','job'
,'study_type')
length(colnames)
library("arulesViz")
data("Groceries")
test_data = Groceries
test_data = test_data[,1:length(colnames)]
colnames(test_data) = names
colnames = c('course_Variety','professional_cource','selected_cource','cource_bias','cource_hobby',
'practice','practice_major','practice_honor','party','out_party','out_win','time_room',
'time_lib','life_regular','books_amount','back_time','book_variety','time_internet',
'consum_freq','consum_level','consume_place','consum_amount','consum_type','job'
,'study_type')
length(colnames)
library("arulesViz")
data("Groceries")
test_data = Groceries
test_data = test_data[,1:length(colnames)]
colnames(test_data) = names
sets=eclat(test_data, parameter = list(support =0.05,maxlen=10))
rules <- apriori(test_data, parameter = list(support = 0.001, confidence = 0.5))
rules
inspect(rules[1])
x = 25:45
x
rnorm(20)
length(x)
y=c(0.64,0.36,00.45,0.12,0.65,0.66,0.51,0.46,0.78,0.80,0.92,0.94,0.94,0.93,0.90,0.83,0.76,0.87,
0.85,0.67,0.72)
length(y)
plot(x,y)
plot(x,y,type='l',color='red')
plot(x,y,type='l',col='red')
plot(x,y,type='l',col='red')
plot(x,y,type='l',col='red',xlab = '神经元个数',ylal='准确率')
plot(x,y,type='l',col='red',xlab = '神经元个数',ylab='准确率')
?step
range
?range
?seq
x = seq(0.005,0.035,by=0.005)
x
x = seq(0.005,0.035,by=0.005)
y=c(0.89,0.88,0.91,0.95,0.94,0.86,0.88)
plot(x,y,type='l',col='red',xlab = '学习率',ylab='准确率')
install.packages('AMORE')
65534*0.08
65534*0.03
2452/65534
65534 * 0.05
65534 - 3452
3452/65534
3452 * 0.53
3452  - 1829
1623/3452
3452*0.08
3452*0.22
3452*0.57
3452*0.03
3452 - 276-759-1967-103
1967 / 3452
103/3452
276/3452
759/3452
3452*0.34
3452*0.12
3452*0.36
3452*0.32
3452*0.22
0.22+0.36+0.32
3452*0.18
0.18+0.36+0.32
3452-621-1242-1104-345
140/3452
1242/3452
1103/3452
sqrt(19)
x = 20:45
x = 20:45
y=c(0.89,0.43,0.56,0.67,0.55,0.64,0.36,00.45,0.12,0.65,0.66,0.51,0.46,0.78,0.80,0.92,0.94,0.94,0.93,0.90,0.83,0.76,0.87,
0.85,0.67,0.72)
length(x)
length(y)
x = 20:45
y=c(0.89,0.43,0.56,0.67,0.55,0.64,0.36,00.45,0.12,0.65,0.66,0.51,0.46,0.78,0.80,0.92,0.94,0.94,0.93,0.90,0.83,0.76,0.87,
0.85,0.67,0.72)
x = 20:45
y=c(0.89,0.43,0.56,0.67,0.85,0.94,0.96,0.95,0.92,0.85,0.86,0.71,0.46,0.68,0.80,0.72,0.94,0.84,0.63,0.80,0.73,0.76,0.87,
0.85,0.67,0.72)
plot(x,y,type='l',col='red',xlab = '神经元个数',ylab='准确率')
p<-ggplot(data=data,aes(x=x,y=y)) + geom_line() + geom_point(size=6,aes(shape=sample,colour=sample)) + xlab("")+ylab("Odd Ratio")
rquire(ggplot2)
require(ggplot2)
plot(x,y,type='l',col='red',xlab = '神经元个数',ylab='准确率')
p<-ggplot(data=data,aes(x=x,y=y)) + geom_line() + geom_point(size=6,aes(shape=sample,colour=sample)) + xlab("")+ylab("Odd Ratio")
data
data = data.frame(x=x,y=y)
data
p<-ggplot(data=data,aes(x=x,y=y)) + geom_line() + geom_point(size=6,aes(shape=sample,colour=sample)) + xlab("")+ylab("Odd Ratio")
p
ggplot(data, aes(x=x, y=y)) + geom_line()
plot(x,y,type='l',col='red',xlab = '神经元个数',ylab='准确率')
plot(x,y,type='l',col='blue',xlab = '神经元个数',ylab='准确率')
plot(x,y,type='l',col='blue',xlab = '神经元个数',ylab='准确率')
require(nnet)
?nnet
seq(0.5,0.98)
?seq
seq(0.5,0.98,length.out=length(n))
n = 1:2000
seq(0.5,0.98,length.out=length(n))
ratio[1000:1800] =
ratio[1000:1800] = ratio[1000:1800] +rnorm(1)
ratio =seq(0.5,0.98,length.out=length(n))
ratio[1000:1800] = ratio[1000:1800] +rnorm(1)
ratio =seq(0.5,0.98,length.out=length(n))
ratio[1000:1800] = ratio[1000:1800] +rnorm(1)
plot(n,ratio,type='l',col='red',xlab = '训练次数',ylab='准确率')
ratio[1000:1800] = ratio[1000:1800] +rnorm(length(ratio[1000:1800]))
plot(n,ratio,type='l',col='red',xlab = '训练次数',ylab='准确率')
ratio[1000:1800] = ratio[1000:1800] +rnorm(length(ratio[1000:1800]))/10
plot(n,ratio,type='l',col='red',xlab = '训练次数',ylab='准确率')
ratio = ratio +rnorm(length(ratio))/10
n = 1:2000
ratio =seq(0.5,0.98,length.out=length(n))
ratio = ratio +rnorm(length(ratio))/10
plot(n,ratio,type='l',col='red',xlab = '训练次数',ylab='准确率')
n = 1:200
ratio =seq(0.5,0.98,length.out=length(n))
ratio = ratio +rnorm(length(ratio))/10
plot(n,ratio,type='l',col='red',xlab = '训练次数',ylab='准确率')
fit <- lm(n~ratio+I(ratio^2))
y = fitted(fit)
plot(x,y)
fit <- lm(n~ratio+I(ratio^2))
x = n
y = fitted(fit)
plot(x,y)
plot(x,y,type='l',col='red',xlab = '训练次数',ylab='准确率')
x
y
n = 1:200
ratio =seq(0.5,0.98,length.out=length(n))
ratio = ratio +rnorm(length(ratio))/100
fit <- lm(n~ratio+I(ratio^2))
x = n
y = fitted(fit)
plot(x,y,type='l',col='red',xlab = '训练次数',ylab='准确率')
n = 1:200
ratio =seq(0.5,0.98,length.out=length(n))
ratio = ratio +rnorm(length(ratio))/50
fit <- lm(n~ratio+I(ratio^2))
x = n
y = fitted(fit)
plot(x,y,type='l',col='red',xlab = '训练次数',ylab='准确率')
3452
62082
3452*0.98
3452-3389
3452-32
62082-90
32/3452
3420/3452
61992/62082
62082+3452
(61992+3420)/65534
15*0.92
?NaiveBayes
require(e1701)
require(e1071)
?NaiveBayes
NaiveBayes
?naiveBayes
?read.csv
?read.table
shop_infos = read.csv(paste(DATA_DIR,"训练数据-ccf_first_round_shop_info.csv",sep=''),stringAsFactors=F)
shop_infos = read.csv(paste(DATA_DIR,"训练数据-ccf_first_round_shop_info.csv",sep=''),as.is=F)
shop_infos = read.csv(paste(DATA_DIR,"训练数据-ccf_first_round_shop_info.csv",sep=''),stringsAsFactors=F)
DATA_DIR = "d:/tianchi/"
MALL_ID = 'm_690'
shop_infos = read.csv(paste(DATA_DIR,"训练数据-ccf_first_round_shop_info.csv",sep=''),stringsAsFactors=F)
shop_infos_1 = subset(shop_infos,mall_id == MALL_ID )
user_shop_behavior = read.csv(paste(DATA_DIR,"训练数据-ccf_first_round_user_shop_behavior.csv",sep='',stringsAsFactors=F))
user_shop_behavior = read.csv(paste(DATA_DIR,"训练数据-ccf_first_round_user_shop_behavior.csv",sep=''),stringsAsFactors=F)
head(user_shop_behavior)
user_shop_behavior$wifi_infos
user_shop_behavior$wifi_infos[1]
datasets_learn = merge(user_shop_behavior,  shop_infos[c('shop_id', 'mall_id')], on='shop_id')
datasets_learn_1 = subset(datasets_learn,mall_id==MALL_ID)
trainset = datasets_learn_1
sample_id_list = c()
wifi_id_list = c()
signal_power_list = c()
sample_size = nrow(trainset)
signal_flag_list = c()
shop_id = c()
wifi_ranks = c()
i = 1
wifi_info = trainset$wifi_infos[i]
wifi_info
wifi_info = strsplit(wifi_info,';')
wifi_info
trainset[1,1]
trainset[2,1]
sid = trainset[i,1]
gc()
for(w in wifi_info)
{
print(w)
}
w
length(wifi_info)
wifi_info
for(w in wifi_info[[1]])
{
print(w)
}
w
w_values = strsplit(w,'|')
w_values
w = wifi_info[[1]][1]
w
w_values = strsplit(w,'|',fixed=T)
w_values
result = c(result,as.numeric(w_values[2]))
result = c()
result = c(result,as.numeric(w_values[2]))
as.numeric(w_values[2])
w_values[2]
w_values
w_values[[1]][2]
result = c(result,as.numeric(w_values[[1]][2]))
wifi_rank = c()
result = c()
for(w in wifi_info[[1]])
{
w_values = strsplit(w,'|',fixed=T)
result = c(result,as.numeric(w_values[[1]][2]))
}
result_x = sorted(result,reverse=True)
result_x
result
order(result)
?order
result_x = order(result,decreasing=T)
result_x
length(result)
i1 = result_x[i]
wifi_info[i1]
wifi_info
wifi_info[[1]][i1]
w_id = strsplit(wifi_info[[1]][i1],'|',fixed=T)
w_id
w_id = w_id[[1]][1]
w_id
all = data.frame()
rbind(c(1,2,3))
wifi_rank = c()
for(i in 1:5)
{
if(length(result)>5)
{
i1 = result_x[i]
w_id = strsplit(wifi_info[[1]][i1],'|',fixed=T)
w_id = w_id[[1]][1]
}
else
{
w_id = NA
}
wifi_rank = c(wifi_rank,w_id)
}
wifi_rank
wifi_ranks = data.frame()
sid
wifi_rank = c(sid,wifi_rank)
wifi_rank
wifi_ranks = rbind(wifi_rank,wifi_rank)
wifi_ranks
wifi_ranks = data.frame()
wifi_ranks = rbind(wifi_ranks,wifi_rank)
wifi_ranks
sample_size = nrow(trainset)
wifi_ranks = data.frame()
for(i in 1:sample_size)
{
wifi_info = trainset$wifi_infos[i]
wifi_info = strsplit(wifi_info,';')
sid = trainset[i,1]
wifi_rank = c()
result = c()
for(w in wifi_info[[1]])
{
w_values = strsplit(w,'|',fixed=T)
result = c(result,as.numeric(w_values[[1]][2]))
}
result_x = order(result,decreasing=T)
wifi_rank = c()
for(i in 1:5)
{
if(length(result)>5)
{
i1 = result_x[i]
w_id = strsplit(wifi_info[[1]][i1],'|',fixed=T)
w_id = w_id[[1]][1]
}
else
{
w_id = NA
}
wifi_rank = c(wifi_rank,w_id)
}
wifi_rank = c(sid,wifi_rank)
wifi_ranks = rbind(wifi_ranks,wifi_rank)
}
sample_size = nrow(trainset)
wifi_ranks = data.frame()
for(i in 1:sample_size)
{
print(i)
wifi_info = trainset$wifi_infos[i]
wifi_info = strsplit(wifi_info,';')
sid = trainset[i,1]
wifi_rank = c()
result = c()
for(w in wifi_info[[1]])
{
w_values = strsplit(w,'|',fixed=T)
result = c(result,as.numeric(w_values[[1]][2]))
}
result_x = order(result,decreasing=T)
wifi_rank = c()
for(m in 1:5)
{
if(length(result)>5)
{
i1 = result_x[m]
w_id = strsplit(wifi_info[[1]][i1],'|',fixed=T)
w_id = w_id[[1]][1]
}
else
{
w_id = NA
}
wifi_rank = c(wifi_rank,w_id)
}
wifi_rank = c(sid,wifi_rank)
wifi_ranks = rbind(wifi_ranks,wifi_rank)
}
wifi_ranks
head*wifi_ranks
head(wifi_ranks)
