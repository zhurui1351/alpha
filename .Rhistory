head(subrecords)
data.frame(subrecords)
head(subrecords)
head(subrecords,10)
xx = data.frame(subrecords)
subset(xx,opentime == closetime)
data = orgin_data
cci = CCI(data$Cl,10)
atr = ATR(data,10)
atr = atr$atr
data$atr = atr
data$cci = cci
data = na.omit(data)
chl_status = CHL_status$new()
chl_status$uplimit = 100
chl_status$downlimit = -100
position = Position$new()
winpoint = 15
losspoint = 15
pren = 3
pred = data[1:pren,]
for(i in (pren+1):nrow(data))
{
d = data[i,]
position = CHL_strategy(d,position,pred,chl_status,losspoint=losspoint,winpoint=winpoint,n=0)
position$update(d,NULL,iswinfirst=F)
chl_status$update(d)
pred = data[(i-pren+1):i,]
}
records = position$records
#records = position$getRecords()
basic_analysis(records)
head(subrecords)
require(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector()
library(xts)
library(dygraphs)
library(lubridate)
graph_data <- xts(x = c(1,2,3,4), order.by = lubridate::ymd(c("2015-01-01", "2015-02-01", "2015-03-01", "2015-04-01")))
names(graph_data) <- "value"
dygraph(graph_data) %>%
dyOptions(useDataTimezone = TRUE, plotter =
"function barChartPlotter(e) {
var ctx = e.drawingContext;
var points = e.points;
var y_bottom = e.dygraph.toDomYCoord(0);  // see     http://dygraphs.com/jsdoc/symbols/Dygraph.html#toDomYCoord
// This should really be based on the minimum gap
var bar_width = 2/3 * (points[1].canvasx - points[0].canvasx);
ctx.fillStyle = e.color;
// Do the actual plotting.
for (var i = 0; i < points.length; i++) {
var p = points[i];
var center_x = p.canvasx;  // center of the bar
ctx.fillRect(center_x - bar_width / 2, p.canvasy,
bar_width, y_bottom - p.canvasy);
ctx.strokeRect(center_x - bar_width / 2, p.canvasy,
bar_width, y_bottom - p.canvasy);
}
}")
head(data)
dygraph(data['2003-08-01'])
install_github("madlogos/recharts")
require(devtools)
install_github("madlogos/recharts")
install.packages('htmltools')
install.packages("htmltools")
install.packages("htmltools")
install_github("madlogos/recharts")
require(devtools)
install_github("madlogos/recharts")
install.packages("ggthemes")
install_github("madlogos/recharts")
library(recharts)
echartr(iris, Sepal.Length, Sepal.Width, series = Species)
head(data)
data
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
CHL_status = R6Class('nbarstate',
public = list(
precci = 0,
uplimit = 100,
downlimit = -100,
status = 'init',
initialize = function(precci=0)
{
self$precci = as.numeric(precci)
},
update = function(d)
{
cci = as.numeric(d$cci)
precci = self$precci
uplimit = self$uplimit
downlimit = self$downlimit
if(precci > downlimit && cci < downlimit)
{
status = 'short'
}
else if(precci<uplimit && cci > uplimit)
{
status = 'long'
}
else{
status = 'init'
}
self$status = status
self$precci = cci
}
)
)
CHL_strategy = function(d,position,pred,chlstatus,losspoint=10,winpoint=10,n=0)
{
time = as.character(index(d))
open = as.numeric(d$Open)
cci = as.numeric(d$cci)
curpostion = position
high = as.numeric(d$High)
low = as.numeric(d$Low)
prehigh = max(as.numeric(pred$High)) + n
prelow = min(as.numeric(pred$Low)) + n
status = chlstatus$status
if(status == 'long' && high > prehigh)
{
op = ifelse(open > prehigh,open,prehigh)
stoploss = op - losspoint
stopwin = op + winpoint
r = data.frame(opentime=time,closetime=NA,open=op,close=NA,stopwin=stopwin,stoploss=stoploss,type='long',exittype='')
trade = Trade$new(r,stopwin=defaultstopwin,stoploss=defaultstoploss)
curpostion$add(trade)
}
if(status == 'short' && low < prelow)
{
op = ifelse(open < prelow,open,prelow)
stoploss = op + losspoint
stopwin = op - winpoint
r = data.frame(opentime=time,closetime=NA,open=op,close=NA,stopwin=stopwin,stoploss=stoploss,type='short',exittype='')
trade = Trade$new(r,stopwin=defaultstopwin,stoploss=defaultstoploss)
curpostion$add(trade)
}
return(curpostion)
}
CHLframework = function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
cci = CCI(data$Cl,10)
atr = ATR(data,10)
atr = atr$atr
data$atr = atr
data$cci = cci
data = na.omit(data)
chl_status = CHL_status$new()
chl_status$uplimit = 100
chl_status$downlimit = -100
position = Position$new()
winpoint = 15
losspoint = 15
pren = 3
pred = data[1:pren,]
for(i in (pren+1):nrow(data))
{
d = data[i,]
position = CHL_strategy(d,position,pred,chl_status,losspoint=losspoint,winpoint=winpoint,n=0)
position$update(d,NULL,iswinfirst=T)
chl_status$update(d)
pred = data[(i-pren+1):i,]
}
records = position$records
#records = position$getRecords()
basic_analysis(records)
}
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
nbarframework = function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
for(i in (pren+1):nrow(data))
{
#print(i)
d = data[i,]
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,pred)
position$update(d,nbarstate,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
}
records = position$records
basic_analysis(records)
}
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
orgin_data = getdata(dbname,tbname,freq)
data = orgin_data
#data$sma = lag(SMA(data$Close,20),1)
#data = na.omit(data)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
for(i in (pren+1):nrow(data))
{
#print(i)
d = data[i,]
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,pred)
position$update(d,nbarstate,iswinfirst=T)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
}
records = position$records
basic_analysis(records)
nbarstate = NbarState$new()
position = Position$new()
winpoint = 15
losspoint = 15
n = 3
pren = 1
pred = data[1:pren,]
for(i in (pren+1):nrow(data))
{
#print(i)
d = data[i,]
position = nbar_strategy(d,position,nbarstate,losspoint=losspoint,winpoint=winpoint,n=n,pred)
position$update(d,nbarstate,iswinfirst=F)
nbarstate$update(d)
pred = data[(i-pren+1):i,]
}
records = position$records
basic_analysis(records)
require(echartr)
require(echartsr)
require(recharts)
head(data)
stock = head(data)
echartr(stock, as.character(date), c(open, close, low, high), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price"
)
echartr(stock, as.character(index(data)), c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
echartr(stock, as.character(index(data)), c(Open, Close, Low, High), type='k')
?echartr
echartr(stock, as.character(index(data)), c('Open', 'Close', 'Low', 'High'), type='k')
echartr(stock, type='k')
echartr(stock,type='k')
stock
echartr(stock[,1:4],type='k')
echartr(iris, Sepal.Length, Sepal.Width, series = Species)
Sepal.Length
head(iris)
echartr(stock, as.character(index(stock)), c('Open', 'Close', 'Low', 'High'), type='k')
stock
echartr(stock, as.character(index(stock)), c(Open, Close, Low, High), type='k')
echartr(stock, as.character(index(stock)), c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
time = as.character(index(stock))
time
stock = data.frame(stock)
echartr(stock, as.character(index(stock)), c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
echartr(data.frame(data[1:1000,]), , c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
stock = data.frame(data[1:1000,])
stock
time = as.character(index(data[1:1000,]))
time
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
stock = data[1:100,]
time = as.character(index(stock))
stock = data.frame(stock)
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
rm(list=ls(all=T))
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface',encoding='utf-8')
source('src/dw/collectdata/collectfromwind.R',encoding='utf-8')
sourceDir('src/algorithm',encoding='utf-8')
source('src/strategy/shock/nbarclass.R',encoding='utf-8')
source('src/config/include.R',encoding='utf-8')
source('src/dw/interface/stock/readallstock.R',encoding='utf-8')
lookups = readallstock(sman=30,atrn = 30)
date = '2017-06-02'
lowprice = 15
highprice = 25
get_state = function(data)
{
allstatus = data.frame()
marketmaStatus = MarketMaStatus$new()
for(i in 1:nrow(data))
{
d = data[i,]
marketmaStatus$update(d)
status = marketmaStatus$status
r = data.frame(time = index(d),status=status)
allstatus = rbind(allstatus,r)
}
allstatus = xts(allstatus$status,order.by=allstatus$time)
return(allstatus)
}
shindex = readSHindex(sman=30,atrn = 30)
shstatus = get_state(shindex)
MarketMaStatus = R6Class('MarketMaStatus',
public = list(
status = 'init',
# prestatus = 'init'
judge = Judge$new(),
upcount = 0,
downcount = 0,
update = function(d)
{
line = d$sma
atr = d$atr
#暂不考虑触发
#trigger_up = line + atr
#trigger_down = line - atr
if(self$judge$is_up_line(d,line))
{
self$upcount = self$upcount+1
self$downcount = 0
if(self$status == 'down')
{
self$status = 'osi_down'
}
if(self$upcount >= 5)
{
self$status = 'up'
}
}
else if(self$judge$is_down_line(d,line))
{
self$upcount = 0
self$downcount = self$downcount + 1
if(self$status == 'up')
{
self$status = 'osi_up'
}
if(self$downcount >= 5)
{
self$status = 'down'
}
}
else if(self$judge$is_cross_line(d,line))
{
self$upcount = 0
self$downcount = 0
if(self$status =='up' || self$status == 'down')
{
self$status = paste('osi',self$status,sep='_')
}
}
}
)
)
shindex = readSHindex(sman=30,atrn = 30)
shstatus = get_state(shindex)
shindex_w = to.weekly(shindex)
colnames(shindex_w) = c('Open','High','Low','Close','Volume')
shindex_w$sma = SMA(Cl(shindex_w),30)
shindex_w$atr = ATR(shindex_w)$atr
shindex_w = na.omit(shindex_w)
shstatus_w = get_state(shindex_w)
satisfied_stocks = c()
for(code in lookups)
{
if(substring(code,1,1) == 3) next
stock = get(code)
currentprice = stock[date]
if(nrow(currentprice) == 0 )
next
close = as.numeric(currentprice$Close)
sma =  as.numeric(currentprice$sma)
atr =  as.numeric(currentprice$atr)
#过滤价格
if(!(close >= lowprice && close <= highprice))
next
stock = na.omit(stock)
len = nrow(stock)
status = get_state(stock[(len-100):len])
if(status[date] == 'down') next
i = which(index(stock) == date)
preday_data = stock[(i-1),]
predate = index(preday_data)
preday_status = status[predate]
if((sma - close)/atr > 2 || (sma - close)/atr < -2)
next
if(preday_status == 'down' && status[date] == 'osi_down')
{
satisfied_stocks = c(satisfied_stocks,code)
}
}
satisfied_stocks
visualize_bar = function(data,start,end)
{
perd = paste(start,end,sep='/')
stock = data[perd]
time = as.character(index(stock))
stock = data.frame(stock)
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
}
stock = get('000766')
visualize_bar(stock,'2017-05-01','2017-06-02')
head(stock)
start = '2017-05-01'
end = '2017-06-02'
perd = paste(start,end,sep='/')
data = get(satisfied_stocks[1])
stock = data[perd]
time = as.character(index(stock))
stock = data.frame(stock)
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
require(rechart)
require(recharts)
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
echartr(stock, time, c(Open, Close, Low, High), type='k')
echartr(iris, Sepal.Length, Sepal.Width, series = Species)
require(recharts)
require(recharts)
echartr(iris, Sepal.Length, Sepal.Width, series = Species)
source('src/config/include.R',encoding='utf-8')
source('src/dw/interface/stock/readallstock.R',encoding='utf-8')
lookups = readallstock(sman=30,atrn = 30)
date = '2017-06-02'
lowprice = 15
highprice = 25
get_state = function(data)
{
allstatus = data.frame()
marketmaStatus = MarketMaStatus$new()
for(i in 1:nrow(data))
{
d = data[i,]
marketmaStatus$update(d)
status = marketmaStatus$status
r = data.frame(time = index(d),status=status)
allstatus = rbind(allstatus,r)
}
allstatus = xts(allstatus$status,order.by=allstatus$time)
return(allstatus)
}
shindex = readSHindex(sman=30,atrn = 30)
visualize_bar(shindex,'2017-04-01','2017-06-02')
start = '2017-04-01'
end = '2017-06-02'
data = shindex
head(data)
perd = paste(start,end,sep='/')
stock = data[perd]
stock
stock = data.frame(stock)
stock
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
head(stock)
echartr(stock, time, c(Open, Close, Low, High), type='k')
echartr(iris, Sepal.Length, Sepal.Width, series = Species)
time
time = as.character(index(stock))
time
echartr(stock, time, c(Open, Close, Low, High), type='k') %>%
setXAxis(name='Date', axisLabel=list(rotate=30)) %>%
setYAxis(name="Price")
visualize_bar(stock,start,end)
visualize_bar(shindex,start,end)
