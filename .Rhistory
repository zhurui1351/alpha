x
head(x)
nrow(hdf_f)
x = order(hdf_f$DateUTC,hdf_f$hour)
head(x)
hdf_f = hdf_f[order(hdf_f$DateUTC,hdf_f$hour),]
head(hdf_f)
head(hdf_f,15)
head(hdf_f,30)
days = unique(hdf_f$DateUTC)
days
day = days[100]
hdf_f$DateUTC = as.character(as.Date(hdf_f$DateUTC))
days = unique(hdf_f$DateUTC)
day = days[1000]
day
days
day = days[200]
day
head(hdf_f)
r = subset(hdf_f,DateUTC == day)
dayinfo = subset(hdf_f,DateUTC == day)
dayinfo
days = unique(hdf_f$DateUTC)
for(day in days)
{
dayinfo = subset(hdf_f,DateUTC == day)
if(length(dayinfo$hour) == 24) next
print(day)
}
day = '2015-03-08'
dayinfo = subset(hdf_f,DateUTC == day)
length(dayinfo$hour)
dayinfo$hour
diff = setdiff(dayinfo$hour,1:24)
diff
diff = setdiff(1:24,dayinfo$hour)
diff
for(d in diff)
{
print(d)
}
r = subset(dayinfo,hour = (d-1))
r
r = subset(dayinfo,hour == (d-1))
r
days = unique(hdf_f$DateUTC)
for(day in days)
{
dayinfo = subset(hdf_f,DateUTC == day)
if(length(dayinfo$hour) == 24) next
diff = setdiff(1:24,dayinfo$hour)
for(d in diff)
{
r = subset(dayinfo,hour == (d-1))
hdf_f = rbind(hdf_f,r)
}
}
hdf_f = hdf_f[order(hdf_f$DateUTC,hdf_f$hour),]
day = '2015-03-08'
dayinfo = subset(hdf_f,DateUTC == day)
dayinfo
hdf_f = hdf_xts[hour_seq,]
hdf_f = as.data.frame(hdf_f)
rownames(hdf_f) = NULL
h = as.numeric(strftime(hdf_f$DateUTC,'%H')) + 1
hdf_f$hour = h
hdf_f$DateUTC = as.character(as.Date(hdf_f$DateUTC))
hdf_f = hdf_f[,c('DateUTC','hour','TemperatureC','Dew_PointC','Humidity','Sea_Level_PressurehPa','Wind_SpeedKm_h')]
#填充数据
days = unique(hdf_f$DateUTC)
for(day in days)
{
dayinfo = subset(hdf_f,DateUTC == day)
if(length(dayinfo$hour) == 24) next
diff = setdiff(1:24,dayinfo$hour)
for(d in diff)
{
r = subset(dayinfo,hour == (d-1))
r$hour = d
hdf_f = rbind(hdf_f,r)
}
}
day
dayinfo = subset(hdf_f,DateUTC == day)
dayinfo
diff = setdiff(1:24,dayinfo$hour)
diff
days = unique(hdf_f$DateUTC)
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,DateUTC == day)
if(length(dayinfo$hour) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
diff = setdiff(1:24,dayinfo$hour)
for(d in diff)
{
r = subset(dayinfo,hour == (d-1))
r$hour = d
dayinfo = rbind(dayinfo,r)
}
hdf_complete = rbind(hdf_complete,dayinfo)
}
d
day
dayinfo
days = unique(hdf_f$DateUTC)
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,DateUTC == day)
if(length(dayinfo$hour) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
print(day)
}
d
dayinfo$hour
diff
dayinfo
hdf_f
tail(hdf_f)
write.csv(hdf_f,'d:/weatherdata.csv',row.names=F)
x = getWeatherForDate('shanghai', '2015-12-31',opt_detailed=TRUE,opt_all_columns=T)
x
x = 2
y =c(3,1,5,6,2)
y - x
order(y-x)
w = order(dayinfo$hour - d)
w
w = order((dayinfo$hour - d),decreasing = F)[1]
order(c(2,3,1,5)-1,decreasing = F)
w = order((dayinfo$hour - d),decreasing = F)[1]
days = unique(hdf_f$DateUTC)
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,DateUTC == day)
if(length(dayinfo$hour) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
diff = setdiff(1:24,dayinfo$hour)
for(d in diff)
{
w = order((dayinfo$hour - d),decreasing = F)[1]
r = subset(dayinfo,hour == w)
r$hour = d
dayinfo = rbind(dayinfo,r)
}
hdf_complete = rbind(hdf_complete,dayinfo)
}
day
r
w
dayinfo
w = dayinfo$hour[w]
w
#填充数据
days = unique(hdf_f$DateUTC)
hdf_complete = data.frame()
for(day in days)
{
dayinfo = subset(hdf_f,DateUTC == day)
if(length(dayinfo$hour) == 24)
{
hdf_complete = rbind(hdf_complete,dayinfo)
next
}
diff = setdiff(1:24,dayinfo$hour)
for(d in diff)
{
w = order((dayinfo$hour - d),decreasing = F)[1]
w = dayinfo$hour[w]
r = subset(dayinfo,hour == w)
r$hour = d
dayinfo = rbind(dayinfo,r)
}
hdf_complete = rbind(hdf_complete,dayinfo)
}
hdf_complete
hdf_complete = hdf_complete[order(hdf_complete$DateUTC,hdf_complete$hour),]
write.csv(hdf_complete,'d:/weatherdata.csv',row.names=F)
colnames(hdf_complete)
colnames(hdf_complete)[1]
colnames(hdf_complete)[1] = 'Date'
hdf_complete = hdf_complete[order(hdf_complete$DateUTC,hdf_complete$hour),]
colnames(hdf_complete)[1] = 'Date'
hdf_complete
hdf_complete = hdf_complete[order(hdf_complete$Date,hdf_complete$hour),]
write.csv(hdf_complete,'d:/weatherdata.csv',row.names=F)
?density
density
density
?density
install.packages('mcluster')
install.packages('mclust')
install.packages('upclass')
install.packages('upclass')
install.packages('upclass')
install.packages('upclass')
install.packages('upclass')
install.packages('upclass')
40*1000 /(365*24*60)
0.7m
-1/1.5
0.57 * -0.7 +0.52*0.3 + 1.4*0.63
0.57 * -1.3 +0.52*1.2 + 1.4*-1.3
0.57 * -1.3 +0.52*1.2 + 0.63*-1.3
0.57 * 1.3 +0.52*1.2 + 0.63*0.1
scale
scale(c(1,2,3,4,5))
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
require(RMySQL)
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbDisconnect(conn)
games = read.csv(path)
path = 'd:/football.csv'
games = read.csv(path)
head(games)
games = games[,c('id','season','round',,'时间','主队','比分','客队','半场')]
games = games[,c('id','season','round','时间','主队','比分','客队','半场')]
games
head(games)
score = as.character(games$比分)
score = strsplit(score,':')
pre_score = as.numeric(score[[1]][1])
aft_score = as.numeric(score[[1]][2])
games$主进球 = pre_socre
games$客进球 = aft_score
pre_score = as.numeric(score[[1]][1])
aft_score = as.numeric(score[[1]][2])
games$主进球 = pre_socre
games$客进球 = aft_score
games$主进球 = pre_score
games$客进球 = aft_score
head(games)
score = as.character(games$半场)
score = strsplit(score,':')
pre_score = as.numeric(score[[1]][1])
aft_score = as.numeric(score[[1]][2])
games$半场主进球 = pre_score
games$半场客进球 = aft_score
head(games)
score
score[[1]][1]
socre[1]
score
score[1]
nrow(games)
sapply(score,function(x)x[1])
pre_score = sapply(score,function(x) as.numeric(x[1]))
warnings()
score = as.character(games$比分)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
games$主进球 = pre_score
games$客进球 = aft_score
score = as.character(games$半场)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
games$半场主进球 = pre_score
games$半场客进球 = aft_score
head(games)
games = na.omit(games)
head(games)
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbWriteTable(conn,'games',games,overwrite=overwrite,row.names = F)
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
dbDisconnect(conn)
path = 'd:/football_asia_lottery.csv'
asia = read.csv(path)
head(asia)
path = 'd:/football_eur_lottery.csv'
eur = read.csv(path)
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbWriteTable(conn,'asia_lottery',asia,overwrite=T,row.names = F)
dbWriteTable(conn,'eur_lottery',eur,overwrite=T,row.names = F)
dbDisconnect(conn)
head(eur)
require(RMySQL)
path = 'd:/football.csv'
games = read.csv(path)
games = games[,c('id','season','round','时间','主队','比分','客队','半场')]
score = as.character(games$比分)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
games$主进球 = pre_score
games$客进球 = aft_score
score = as.character(games$半场)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
games$半场主进球 = pre_score
games$半场客进球 = aft_score
games = na.omit(games)
path = 'd:/football_asia_lottery.csv'
asia = read.csv(path)
path = 'd:/football_eur_lottery.csv'
eur = read.csv(path)
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
hea(eur)
head(eur)
head(asia)
head(games)
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbSendQuery(conn,'SET NAMES gbk')
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
dbWriteTable(conn,'asia_lottery',asia,overwrite=T,row.names = F)
dbWriteTable(conn,'eur_lottery',eur,overwrite=T,row.names = F)
dbDisconnect(conn)
head(games)
dbSendQuery(conn,'SET NAMES utf8')
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbSendQuery(conn,'SET NAMES utf8')
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
head(games)
dbSendQuery(conn,'SET NAMES gbk')
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
dbSendQuery(conn,'SET NAMES gbk')
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
dbSendQuery(conn,'SET NAMES utf8')
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
games
require(RMySQL)
path = 'd:/football.csv'
games = read.csv(path)
games = games[,c('id','season','round','时间','主队','比分','客队','半场')]
score = as.character(games$比分)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
games$主进球 = pre_score
games$客进球 = aft_score
score = as.character(games$半场)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
games$半场主进球 = pre_score
games$半场客进球 = aft_score
games = na.omit(games)
path = 'd:/football_asia_lottery.csv'
asia = read.csv(path)
path = 'd:/football_eur_lottery.csv'
eur = read.csv(path)
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbSendQuery(conn,'SET NAMES gbk')
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
dbWriteTable(conn,'asia_lottery',asia,overwrite=T,row.names = F)
dbWriteTable(conn,'eur_lottery',eur,overwrite=T,row.names = F)
dbDisconnect(conn)
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbSendQuery(conn,'SET NAMES gbk')
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
rm(list = ls(all=T))
path = 'd:/lottery/lottery.csv'
data = read.csv(path)
data$时间 = paste(data$时间,':00',sep='')
data$时间 = as.POSIXct(data$时间)
x1 = seq(1,nrow(data)-1,by = 2)
x2 = seq(0,nrow(data),by = 2)
data_pre = data[x1,]
data_after = data[x2,]
game_data = merge(data_pre,data_after,by = c('时间','序号','比分'))
colnames(game_data) = c('时间','序号','比分','前胜','前平','前负','前类型','后胜','后平','后负','后类型')
game_data$day = substr(game_data$时间,1,10)
game_sub_data = subset(game_data, 后胜 >=1.31 & 后胜 <= 1.6 )
times = unique(game_sub_data$时间)
pre_time = times[1]
win_flag = F
win_count = 0
start_time =  times[1]
gaps = c()
continues = c()
result = data.frame()
game_counts = 0
for(i in 2:length(times))
{
#print(i)
time = times[i]
games = subset(game_sub_data,时间==time)
games = games[order(games$时间,decreasing = F),]
game = games[1,]
gap = as.numeric(difftime(time ,pre_time,units = 'mins'))
if(gap < 120)
{
next
}
else
{
game_counts = game_counts + 1
score = as.character(game$比分)
score = strsplit(score,':')
pre_score = as.numeric(score[[1]][1])
aft_score = as.numeric(score[[1]][2])
#主场胜
if((pre_score - aft_score) > 0)
{
if(win_flag)
{
win_count = win_count + 1
}
else
{
win_flag = T
start_time = time
win_count = win_count + 1
}
}
else
{
if(win_flag )
{
gap_mins = as.numeric(difftime(time ,start_time,units = 'mins'))
continues = c(continues,win_count)
gaps = c(gaps,gap_mins)
#  print(start_time)
r = data.frame(count = win_count,start = start_time,end = time )
result = rbind(result,r)
}
win_flag = F
win_count = 0
}
}
pre_time = time
}
require(RMySQL)
path = 'd:/football.csv'
games = read.csv(path)
games = games[,c('id','season','round','时间','主队','比分','客队','半场')]
score = as.character(games$比分)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
games$主进球 = pre_score
games$客进球 = aft_score
score = as.character(games$半场)
score = strsplit(score,':')
pre_score = sapply(score,function(x) as.numeric(x[1]))
aft_score = sapply(score,function(x) as.numeric(x[2]))
games$半场主进球 = pre_score
games$半场客进球 = aft_score
games = na.omit(games)
path = 'd:/football_asia_lottery.csv'
asia = read.csv(path)
path = 'd:/football_eur_lottery.csv'
eur = read.csv(path)
host = '127.0.0.1'
username="root"
password = '123456'
port = 3306
dbname = 'football'
conn = dbConnect(MySQL(), dbname = dbname, username=username, password=password,host=host,port=port)
dbSendQuery(conn,'SET NAMES gbk')
dbWriteTable(conn,'games',games,overwrite=T,row.names = F)
dbWriteTable(conn,'asia_lottery',asia,overwrite=T,row.names = F)
dbWriteTable(conn,'eur_lottery',eur,overwrite=T,row.names = F)
dbDisconnect(conn)
devtools::install_github("gmum/gmum.r", ref="dev", args="--no-lock --no-multiarch")
devtools::install_github("gmum/gmum.r", ref="dev", args="--no-lock --no-multiarch")
devtools::install_github("gmum/gmum.r", ref="dev", args="--no-lock --no-multiarch")
devtools::install_github("gmum/gmum.r", ref="dev", args="--no-lock --no-multiarch")
install.packages('curl')
install.packages("curl")
devtools::install_github("gmum/gmum.r", ref="dev", args="--no-lock --no-multiarch")
install.packages('digest')
devtools::install_github("gmum/gmum.r", ref="dev", args="--no-lock --no-multiarch")
install.packages('Rcpp')
install.packages("Rcpp")
devtools::install_github("gmum/gmum.r", ref="dev", args="--no-lock --no-multiarch")
require(gmum.r)
exit
