cl = curlow
type = 'stoplong'
break
}
else if(strategy == 'long' && curhigh >= profit_long)
{
cl = curhigh
type = 'profitlong'
break
}
}
profit = ifelse(strategy == 'long',(cl-op),(op-cl))
r = data.frame(i=i,day=day,center = center_pr,open=open,op=op,hi = hi,low=low,close=cl,profit=profit,var=sd,strategy=strategy,type=type)
points_result = rbind(points_result,r)
}
return(points_result)
}
stat_orgin_centers = function(xx_dcast,centers_scale,labels,k=9,n=15,threshold=0.5)
{
result = data.frame()
startpoint = k + 1
for( i in 1:n)
{
class_n =  xx_dcast[which(labels == i),]
days = class_n[,'day']
points = sapply(days,function(d){
day_data = data[d]
op = as.numeric(day_data[startpoint,]$Close)
cl = as.numeric(day_data[15,]$Close)
gap = cl - op
return(gap)
}
)
strategy = center_strategy(centers_scale,i,k,threshold=0.5)
totalpoints = sum(points)
len = length(points)
ratio = length(points[points>0])/length(points)
r = data.frame(center=i,strategy=strategy,points=totalpoints,len=len,ratio=ratio)
result = rbind(result,r)
}
return(result)
}
trading_result_analysis = function(points_result)
{
profit = points_result$profit
totalprofit = sum(profit)
totallen = length(profit)
winratio = length(profit[profit>0])/length(profit)
result_total = data.frame(profit = totalprofit,len=totallen,winratio=winratio)
center_profit = aggregate(profit,by = list(points_result$center),sum)
colnames(center_profit) = c('id','profit')
center_win_ratio = aggregate(profit,by = list(points_result$center),function(x){return(c(length(x[x>0])/length(x)))})
colnames(center_win_ratio) = c('id','winratio')
center_len = aggregate(profit,by = list(points_result$center),function(x){return(length(x))})
colnames(center_len) = c('id','len')
result = merge(merge(center_profit,center_win_ratio),center_len)
result$ptest = apply(result,1,function(x){p = prop.test(as.numeric(x['winratio']) * as.numeric(x['len']),as.numeric(x['len']),0.55,alternative='greater')
return(p$p.value)})
return(list(result_total,result[order(result$id),]))
}
run =function()
{
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
data = getdata(dbname,tbname,freq)
xx_dcast = flat_time_data(data,diffclose='cl',freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
indices = which(apply(xx,MARGIN=1,function(x)(all(as.numeric(x)==x[1]))))
if(length(indices) > 0 )
{
xx=xx[-indices,]
xx_dcast =xx_dcast[-indices,]
}
xx_scaled = apply(xx,MARGIN=1,function(x){return(rbind(as.numeric(scale(as.numeric(x)))))})
xx_scaled = t(xx_scaled)
#xx_scaled = xx
result = transform_bs(xx_scaled,interpolation=1,df=3)
center_set = data.frame()
nsampe = nrow(xx_scaled)
n = 15
turns = 100
for(i in 1:turns)
{
print(i)
samples = sample(1:nsampe,2000)
#set.seed(1234)
#   clust = pam(train_xx,n)
#   centers_index = clust$id.med
#   centers_scale = result[centers_index,]
#   labels = clust$clustering
#   centers = xx[centers_index,]
train_xx = xx_scaled[samples,]
set.seed(1234)
clust = kmeans(train_xx,n,iter.max = 1000)
centers = clust$centers
centers_scale = clust$centers
labels = clust$cluster
predict_point = 10
#plot_centers(centers_scale,n=n,k=predict_point)
train_yy = labels
train_xx_dcast = xx_dcast[samples,]
m = train_svm(train_xx,train_yy,k=predict_point,algorithm=randomForest)
#stat_orgin_centers(xx_dcast,centers_scale,labels,k=predict_point,n=n,threshold=0.5)
test_xx = xx[-samples,]
test_xx_dcast = xx_dcast[-samples,]
points_result = strategy_test(test_xx_dcast,method='svm',isspline=F,test_xx,centers,predict_point=predict_point,threshold=0.3,m=m,stopratio =5,
profitratio = 5,df=3,isscalecenter=F)
trading_result = trading_result_analysis(points_result)
center_result = trading_result[[2]]
satisfied_center = subset(center_result,winratio>0.55 & len>30)
satisfied_center = centers[satisfied_center$id,]
colnames(satisfied_center) = 1:ncol(centers)
center_set = rbind(center_set,satisfied_center)
}
}
dbname ='china_future_ods_m'
tbname = 'dlami'
freq = 15
data = getdata(dbname,tbname,freq)
xx_dcast = flat_time_data(data,diffclose='cl',freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
indices = which(apply(xx,MARGIN=1,function(x)(all(as.numeric(x)==x[1]))))
if(length(indices) > 0 )
{
xx=xx[-indices,]
xx_dcast =xx_dcast[-indices,]
}
xx_scaled = apply(xx,MARGIN=1,function(x){return(rbind(as.numeric(scale(as.numeric(x)))))})
xx_scaled = t(xx_scaled)
#xx_scaled = xx
result = transform_bs(xx_scaled,interpolation=1,df=3)
center_set = data.frame()
nsampe = nrow(xx_scaled)
n = 15
turns = 100
samples = sample(1:nsampe,2000)
#set.seed(1234)
#   clust = pam(train_xx,n)
#   centers_index = clust$id.med
#   centers_scale = result[centers_index,]
#   labels = clust$clustering
#   centers = xx[centers_index,]
train_xx = xx_scaled[samples,]
set.seed(1234)
clust = kmeans(train_xx,n,iter.max = 1000)
centers = clust$centers
centers_scale = clust$centers
labels = clust$cluster
predict_point = 10
#plot_centers(centers_scale,n=n,k=predict_point)
train_yy = labels
train_xx_dcast = xx_dcast[samples,]
m = train_svm(train_xx,train_yy,k=predict_point,algorithm=randomForest)
#stat_orgin_centers(xx_dcast,centers_scale,labels,k=predict_point,n=n,threshold=0.5)
test_xx = xx[-samples,]
test_xx_dcast = xx_dcast[-samples,]
points_result = strategy_test(test_xx_dcast,method='svm',isspline=F,test_xx,centers,predict_point=predict_point,threshold=0.3,m=m,stopratio =5,
profitratio = 5,df=3,isscalecenter=F)
trading_result = trading_result_analysis(points_result)
center_result = trading_result[[2]]
center_result
satisfied_center = subset(center_result,winratio>0.55 & len>30)
satisfied_center
satisfied_center = subset(center_result,winratio>0.65 & len>30)
satisfied_center
nrow(satisfied_center)
centers[satisfied_center$id,]
as.data.frame(centers[satisfied_center$id,])
satisfied_center = subset(center_result,winratio>0.9 & len>30)
nrow(satisfied_center)
class(centers)
centers = as.data.frame(centers)
centers[1,]
center_set = data.frame()
nsampe = nrow(xx_scaled)
n = 15
turns = 100
for(i in 1:turns)
{
print(i)
samples = sample(1:nsampe,2000)
#set.seed(1234)
#   clust = pam(train_xx,n)
#   centers_index = clust$id.med
#   centers_scale = result[centers_index,]
#   labels = clust$clustering
#   centers = xx[centers_index,]
train_xx = xx_scaled[samples,]
set.seed(1234)
clust = kmeans(train_xx,n,iter.max = 1000)
centers = clust$centers
centers_scale = clust$centers
labels = clust$cluster
predict_point = 10
#plot_centers(centers_scale,n=n,k=predict_point)
train_yy = labels
train_xx_dcast = xx_dcast[samples,]
m = train_svm(train_xx,train_yy,k=predict_point,algorithm=randomForest)
#stat_orgin_centers(xx_dcast,centers_scale,labels,k=predict_point,n=n,threshold=0.5)
test_xx = xx[-samples,]
test_xx_dcast = xx_dcast[-samples,]
points_result = strategy_test(test_xx_dcast,method='svm',isspline=F,test_xx,centers,predict_point=predict_point,threshold=0.3,m=m,stopratio =5,
profitratio = 5,df=3,isscalecenter=F)
trading_result = trading_result_analysis(points_result)
center_result = trading_result[[2]]
satisfied_center = subset(center_result,winratio>0.55 & len>50)
if(nrow(satisfied_center) == 0)
{
print('fault')
next
}
centers = as.data.frame(centers)
satisfied_center = centers[satisfied_center$id,]
colnames(satisfied_center) = 1:ncol(centers)
center_set = rbind(center_set,satisfied_center)
}
nrow(center_set)
center_set
cor(center_set)
cor(t(center_set))
set_scaled = apply(center_set,MARGIN=1,function(x){return(rbind(as.numeric(scale(as.numeric(x)))))})
set_scaled = t(set_scaled)
clust = pam(set_scaled,n)
centers_index = clust$id.med
centers_scale = set_scaled[centers_index,]
labels = clust$clustering
labels
clust = pam(set_scaled,3)
centers_index = clust$id.med
centers_scale = set_scaled[centers_index,]
labels = clust$clustering
table(labels)
centers = set_scaled[centers_index,]
plot(centers)
plot_centers(centers)
plot_centers(centers)
centers_scale = centers
windows(1000,1000)
n_row = round(n/5) + 1
n_row
p =par(mfrow=c(n_row,5))
nclust=3
plot_centers(centers,nclust)
clust = pam(set_scaled,nclust)
centers_index = clust$id.med
centers_scale = set_scaled[centers_index,]
labels = clust$clustering
centers = set_scaled[centers_index,]
plot_centers(centers,nclust)
xx_dcast = flat_time_data(data,diffclose='cl',freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
indices = which(apply(xx,MARGIN=1,function(x)(all(as.numeric(x)==x[1]))))
if(length(indices) > 0 )
{
xx=xx[-indices,]
xx_dcast =xx_dcast[-indices,]
}
xx_scaled = apply(xx,MARGIN=1,function(x){return(rbind(as.numeric(scale(as.numeric(x)))))})
xx_scaled = t(xx_scaled)
#xx_scaled = xx
result = transform_bs(xx_scaled,interpolation=1,df=3)
center_set = data.frame()
nsampe = nrow(xx_scaled)
n = 15
turns = 100
for(i in 1:turns)
{
print(i)
samples = sample(1:nsampe,2000)
#set.seed(1234)
train_xx = xx_scaled[samples,]
set.seed(1234)
clust = kmeans(train_xx,n,iter.max = 1000)
centers = clust$centers
centers_scale = clust$centers
labels = clust$cluster
predict_point = 10
#plot_centers(centers_scale,n=n,k=predict_point)
train_yy = labels
train_xx_dcast = xx_dcast[samples,]
m = train_svm(train_xx,train_yy,k=predict_point,algorithm=randomForest)
#stat_orgin_centers(xx_dcast,centers_scale,labels,k=predict_point,n=n,threshold=0.5)
test_xx = xx[-samples,]
test_xx_dcast = xx_dcast[-samples,]
points_result = strategy_test(test_xx_dcast,method='svm',isspline=F,test_xx,centers,predict_point=predict_point,threshold=0.3,m=m,stopratio =5,
profitratio = 5,df=3,isscalecenter=F)
trading_result = trading_result_analysis(points_result)
center_result = trading_result[[2]]
satisfied_center = subset(center_result,winratio>0.55 & len>50)
if(nrow(satisfied_center) == 0)
{
print('fault')
next
}
centers = as.data.frame(centers)
satisfied_center = centers[satisfied_center$id,]
colnames(satisfied_center) = 1:ncol(centers)
center_set = rbind(center_set,satisfied_center)
}
common_centers(center_set,nclust=3)
common_centers = function(center_set,nclust=3)
{
set.seed(1234)
clust = pam(set_scaled,nclust)
centers_index = clust$id.med
centers_scale = set_scaled[centers_index,]
labels = clust$clustering
centers = set_scaled[centers_index,]
plot_centers(centers,nclust)
}
common_centers(center_set,nclust=3)
samples
samples
samples = sample(1:nsampe,2000)
samples
pre_samples = 1:2000
diff(samples,pre_samples)
pre_samples
setdiff(pre_samples)
setdiff(pre_samples,pre_samples)
length(setdiff(pre_samples,pre_samples))
center_set = data.frame()
nsampe = nrow(xx_scaled)
n = 15
turns = 100
pre_samples = 1:2000
for(i in 1:turns)
{
print(i)
samples = sample(1:nsampe,2000)
#set.seed(1234)
print(length(setdiff(pre_samples,pre_samples)))
pre_samples = samples
train_xx = xx_scaled[samples,]
set.seed(1234)
clust = kmeans(train_xx,n,iter.max = 1000)
centers = clust$centers
centers_scale = clust$centers
labels = clust$cluster
predict_point = 10
#plot_centers(centers_scale,n=n,k=predict_point)
train_yy = labels
train_xx_dcast = xx_dcast[samples,]
m = train_svm(train_xx,train_yy,k=predict_point,algorithm=randomForest)
#stat_orgin_centers(xx_dcast,centers_scale,labels,k=predict_point,n=n,threshold=0.5)
test_xx = xx[-samples,]
test_xx_dcast = xx_dcast[-samples,]
points_result = strategy_test(test_xx_dcast,method='svm',isspline=F,test_xx,centers,predict_point=predict_point,threshold=0.3,m=m,stopratio =5,
profitratio = 5,df=3,isscalecenter=F)
trading_result = trading_result_analysis(points_result)
center_result = trading_result[[2]]
satisfied_center = subset(center_result,winratio>0.55 & len>50)
if(nrow(satisfied_center) == 0)
{
print('fault')
next
}
centers = as.data.frame(centers)
satisfied_center = centers[satisfied_center$id,]
colnames(satisfied_center) = 1:ncol(centers)
center_set = rbind(center_set,satisfied_center)
}
pre_samples
samples
samples = sample(1:nsampe,2000)
samples
print(length(setdiff(pre_samples,pre_samples)))
setdiff(pre_samples,pre_samples)
1:nsampe
samples
?sample
pre_samples
samples
2640 %in% pre_samples
pre_samples = 1:2000
print(length(setdiff(pre_samples,pre_samples)))
setdiff(1:3,2:4)
setdiff(1:3,2:5)
intersect(1:3,2:5)
intersect(pre_samples,samples)
length(intersect(pre_samples,samples))
pre_samples = 1:2000
for(i in 1:turns)
{
print(i)
samples = sample(1:nsampe,2000)
#set.seed(1234)
print(length(intersect(pre_samples,pre_samples)))
pre_samples = samples}
for(i in 1:turns)
{
print(i)
samples = sample(1:nsampe,2000)
#set.seed(1234)
print(length(intersect(pre_samples,samples)))
pre_samples = samples}
center_set = data.frame()
nsampe = nrow(xx_scaled)
n = 15
turns = 100
pre_samples = 1:2000
for(i in 1:turns)
{
print(i)
samples = sample(1:nsampe,2000)
#set.seed(1234)
print(length(intersect(pre_samples,samples)))
pre_samples = samples
train_xx = xx_scaled[samples,]
set.seed(1234)
clust = kmeans(train_xx,n,iter.max = 1000)
centers = clust$centers
centers_scale = clust$centers
labels = clust$cluster
predict_point = 10
#plot_centers(centers_scale,n=n,k=predict_point)
train_yy = labels
train_xx_dcast = xx_dcast[samples,]
m = train_svm(train_xx,train_yy,k=predict_point,algorithm=randomForest)
#stat_orgin_centers(xx_dcast,centers_scale,labels,k=predict_point,n=n,threshold=0.5)
test_xx = xx[-samples,]
test_xx_dcast = xx_dcast[-samples,]
points_result = strategy_test(test_xx_dcast,method='svm',isspline=F,test_xx,centers,predict_point=predict_point,threshold=0.3,m=m,stopratio =5,
profitratio = 5,df=3,isscalecenter=F)
trading_result = trading_result_analysis(points_result)
center_result = trading_result[[2]]
satisfied_center = subset(center_result,winratio>0.55 & len>50)
if(nrow(satisfied_center) == 0)
{
print('fault')
next
}
centers = as.data.frame(centers)
satisfied_center = centers[satisfied_center$id,]
colnames(satisfied_center) = 1:ncol(centers)
center_set = rbind(center_set,satisfied_center)
}
common_centers(center_set,nclust=3)
commons = center_set
center_set = data.frame()
nsampe = nrow(xx_scaled)
n = 15
turns = 100
pre_samples = 1:2000
for(i in 1:turns)
{
print(i)
samples = sample(1:nsampe,2000)
#set.seed(1234)
print(length(intersect(pre_samples,samples)))
pre_samples = samples
train_xx = xx_scaled[samples,]
set.seed(1234)
clust = kmeans(train_xx,n,iter.max = 1000)
centers = clust$centers
centers_scale = clust$centers
labels = clust$cluster
predict_point = 10
#plot_centers(centers_scale,n=n,k=predict_point)
train_yy = labels
train_xx_dcast = xx_dcast[samples,]
m = train_svm(train_xx,train_yy,k=predict_point,algorithm=randomForest)
#stat_orgin_centers(xx_dcast,centers_scale,labels,k=predict_point,n=n,threshold=0.5)
test_xx = xx[-samples,]
test_xx_dcast = xx_dcast[-samples,]
points_result = strategy_test(test_xx_dcast,method='svm',isspline=F,test_xx,centers,predict_point=predict_point,threshold=0.3,m=m,stopratio =5,
profitratio = 5,df=3,isscalecenter=F)
trading_result = trading_result_analysis(points_result)
center_result = trading_result[[2]]
satisfied_center = subset(center_result,winratio>0.55 & len>50)
if(nrow(satisfied_center) == 0)
{
print('fault')
next
}
centers = as.data.frame(centers)
satisfied_center = centers[satisfied_center$id,]
colnames(satisfied_center) = 1:ncol(centers)
center_set = rbind(center_set,satisfied_center)
}
common_centers(center_set,nclust=3)
head(center_set)
head(commons)
common_centers = function(center_set,nclust=3)
{
set.seed(1234)
clust = pam(set_scaled,nclust)
centers_index = clust$id.med
centers_scale = set_scaled[centers_index,]
labels = clust$clustering
centers = set_scaled[centers_index,]
plot_centers(centers,nclust)
return(centers)
}
com_centers = common_centers(center_set,nclust=3)
com_centers
plot(centers)
plot_centers(centers)
plot_centers(com_centers)
plot_centers(centers)
satisfied_center
center_result
samples = 1:nsampe#sample(1:nsampe,2000)
train_xx = xx_scaled[samples,]
set.seed(1234)
clust = kmeans(train_xx,n,iter.max = 1000)
centers = clust$centers
centers_scale = clust$centers
labels = clust$cluster
predict_point = 10
plot_centers(centers_scale,n=n,k=predict_point)
