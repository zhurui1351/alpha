}
kmpp <- function(X, k,iter.max = 50000, nstart = 100) {
set.seed(1234)
n <- nrow(X)
C <- numeric(k)
C[1] <- sample(1:n, 1)
for (i in 2:k) {
dm <- distmat(X, X[C, ])
pr <- apply(dm, 1, min); pr[C] <- 0
C[i] <- sample(1:n, 1, prob = pr)
}
return(kmeans(X, X[C, ],iter.max = 50000, nstart = 100) )
}
dbname = 'china_future_ods_m'
tbname = 'dlcmi'
freq=15
data = getdata(dbname,tbname,freq)
cdata = data
adata = data
xx_dcast = flat_time_data(data,diffclose=T,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
num_centers = 15
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
k = 9
numcol = ncol(centers)
prlabels = apply(xx,MARGIN = 1,predict_center,centers,k)
point_total = xx[,1:numcol]
point_total_sum = apply(point_total,2,sum)
point_total_ratio_up = apply(point_total,2,function(x){sum(x>0)/sum(x!=0)})
point_total_ratio_down = apply(point_total,2,function(x){sum(x<0)/sum(x!=0)})
dt_sep = data.frame()
dt = data.frame()
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
count = length(index)
point = label_data[,(k+1):numcol]
point_col_sum = apply(point,2,sum)
point_col_ratio = apply(point,2,function(x){sum(x>0)/sum(x!=0)})
point_col_sum = cbind(as.data.frame(t(point_col_sum)))
point_col_ratio = cbind(as.data.frame(t(point_col_ratio)))
colnames(point_col_sum) = paste(colnames(point_col_sum),'sum',sep='_')
colnames(point_col_ratio) = paste(colnames(point_col_ratio),'ratio',sep='_')
point_col = cbind(point_col_ratio,point_col_sum)
point_col = cbind(data.frame(center=i,count=count),point_col)
dt_sep = rbind(dt_sep,point_col)
point_sum = apply(point,1,sum)
total = sum(point_sum)
upratio = sum(point_sum>0)/sum(point_sum!=0)
pvalue = prop.test(count*upratio,count)
uppvalue = pvalue$p.value
r = data.frame(center=i,sum = total,upratio = upratio,count,uppvalue=uppvalue)
dt = rbind(dt,r)
}
good_dt = subset(dt, dt$uppvalue < 0.05  & dt$count > 100)
print(dt_sep)
print(good_dt)
require(WindR)
require(quantmod)
w.start()
date = as.character(Sys.Date())
opentime = paste(date,'09:00:00',sep=' ')
closetime = paste(date,'15:15:00',sep=' ')
w_wsi_data<-w.wsi("C1705.DCE","open,high,low,close,volume,amt",opentime,closetime,"BarSize=15")
#查询主力合约
#w_wss_data<-w.wss('C.DCE','trade_code')
wsi_data = w_wsi_data[[2]]
pricedata = xts(wsi_data[,2:7],order.by = as.POSIXct(wsi_data$DATETIME))
startdata = pricedata[1,]
pricedata = pricedata[2:nrow(pricedata),]
index(pricedata) = index(pricedata) - minutes(15)
y = diff(pricedata$close)
#y = pricedata$close - pricedata$open
y[1] = (pricedata[1,]$close - pricedata[1,]$open)
v = as.numeric(y)
predict_center(v,centers)
good_dt
dt_sep
dt
basic_stats = function(dbname='china_future_ods_m',tbname = 'dlcmi',freq=15,num_centers=15,k=9,diffclose=T)
{
data = getdata(dbname,tbname,freq)
xx_dcast = flat_time_data(data,diffclose=diffclose,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
numcol = ncol(centers)
prlabels = apply(xx,MARGIN = 1,predict_center,centers,k)
point_total = xx[,1:numcol]
point_total_sum = apply(point_total,2,sum)
point_total_ratio_up = apply(point_total,2,function(x){sum(x>0)/sum(x!=0)})
point_total_ratio_down = apply(point_total,2,function(x){sum(x<0)/sum(x!=0)})
dt_sep = data.frame()
dt = data.frame()
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
count = length(index)
point = label_data[,(k+1):numcol]
point_col_sum = apply(point,2,sum)
point_col_ratio = apply(point,2,function(x){sum(x>0)/sum(x!=0)})
point_col_sum = cbind(as.data.frame(t(point_col_sum)))
point_col_ratio = cbind(as.data.frame(t(point_col_ratio)))
colnames(point_col_sum) = paste(colnames(point_col_sum),'sum',sep='_')
colnames(point_col_ratio) = paste(colnames(point_col_ratio),'ratio',sep='_')
point_col = cbind(point_col_ratio,point_col_sum)
point_col = cbind(data.frame(center=i,count=count),point_col)
dt_sep = rbind(dt_sep,point_col)
point_sum = apply(point,1,sum)
total = sum(point_sum)
upratio = sum(point_sum>0)/sum(point_sum!=0)
pvalue = prop.test(count*upratio,count)
uppvalue = pvalue$p.value
r = data.frame(center=i,sum = total,upratio = upratio,count,uppvalue=uppvalue)
dt = rbind(dt,r)
}
good_dt = subset(dt, dt$uppvalue < 0.05  & dt$count > 100)
# print(dt_sep)
#  print(good_dt)
return(list(dt,dt_sep))
}
dt_diffclose = basic_stats(diffclose=T)
head(data)
basic_stats = function(data,num_centers=15,k=9,diffclose=T)
{
xx_dcast = flat_time_data(data,diffclose=diffclose,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
numcol = ncol(centers)
prlabels = apply(xx,MARGIN = 1,predict_center,centers,k)
point_total = xx[,1:numcol]
point_total_sum = apply(point_total,2,sum)
point_total_ratio_up = apply(point_total,2,function(x){sum(x>0)/sum(x!=0)})
point_total_ratio_down = apply(point_total,2,function(x){sum(x<0)/sum(x!=0)})
dt_sep = data.frame()
dt = data.frame()
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
count = length(index)
point = label_data[,(k+1):numcol]
point_col_sum = apply(point,2,sum)
point_col_ratio = apply(point,2,function(x){sum(x>0)/sum(x!=0)})
point_col_sum = cbind(as.data.frame(t(point_col_sum)))
point_col_ratio = cbind(as.data.frame(t(point_col_ratio)))
colnames(point_col_sum) = paste(colnames(point_col_sum),'sum',sep='_')
colnames(point_col_ratio) = paste(colnames(point_col_ratio),'ratio',sep='_')
point_col = cbind(point_col_ratio,point_col_sum)
point_col = cbind(data.frame(center=i,count=count),point_col)
dt_sep = rbind(dt_sep,point_col)
point_sum = apply(point,1,sum)
total = sum(point_sum)
upratio = sum(point_sum>0)/sum(point_sum!=0)
pvalue = prop.test(count*upratio,count)
uppvalue = pvalue$p.value
r = data.frame(center=i,sum = total,upratio = upratio,count,uppvalue=uppvalue)
dt = rbind(dt,r)
}
good_dt = subset(dt, dt$uppvalue < 0.05  & dt$count > 100)
# print(dt_sep)
#  print(good_dt)
return(list(dt,dt_sep))
}
dbname ='china_future_ods_m'
tbname = 'dlcmi'
freq = 15
data = getdata(dbname,tbname,freq)
dt_diffclose = basic_stats(data,num_centers=15,k=9,diffclose=T)
dt_open = basic_stats(data,num_centers=15,k=9,diffclose=F)
dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
dt_dc_sep = dt_diffclose[[2]]
dt_dc = dt_diffclose[[1]]
dt_diffclose = basic_stats(data,num_centers=15,k=9,diffclose=T)
dt_dc = dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
good_dt = subset(dt_dc, dt_dc$uppvalue < 0.05 )# & dt_dc$count > 100)
dt_open = basic_stats(data,num_centers=15,k=9,diffclose=F)
dt_op = dt_open[[1]]
dt_op_sep = dt_open[[2]]
good_dt
basic_stats = function(data,num_centers=15,k=9,diffclose=T,centers,labels)
{
numcol = ncol(centers)
prlabels = apply(xx,MARGIN = 1,predict_center,centers,k)
point_total = xx[,1:numcol]
point_total_sum = apply(point_total,2,sum)
point_total_ratio_up = apply(point_total,2,function(x){sum(x>0)/sum(x!=0)})
point_total_ratio_down = apply(point_total,2,function(x){sum(x<0)/sum(x!=0)})
dt_sep = data.frame()
dt = data.frame()
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
count = length(index)
point = label_data[,(k+1):numcol]
point_col_sum = apply(point,2,sum)
point_col_ratio = apply(point,2,function(x){sum(x>0)/sum(x!=0)})
point_col_sum = cbind(as.data.frame(t(point_col_sum)))
point_col_ratio = cbind(as.data.frame(t(point_col_ratio)))
colnames(point_col_sum) = paste(colnames(point_col_sum),'sum',sep='_')
colnames(point_col_ratio) = paste(colnames(point_col_ratio),'ratio',sep='_')
point_col = cbind(point_col_ratio,point_col_sum)
point_col = cbind(data.frame(center=i,count=count),point_col)
dt_sep = rbind(dt_sep,point_col)
point_sum = apply(point,1,sum)
total = sum(point_sum)
upratio = sum(point_sum>0)/sum(point_sum!=0)
pvalue = prop.test(count*upratio,count)
uppvalue = pvalue$p.value
r = data.frame(center=i,sum = total,upratio = upratio,count,uppvalue=uppvalue)
dt = rbind(dt,r)
}
#good_dt = subset(dt, dt$uppvalue < 0.05  & dt$count > 100)
# print(dt_sep)
#  print(good_dt)
return(list(dt,dt_sep))
}
xx_dcast = flat_time_data(data,diffclose=diffclose,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
basic_stats = function(xx,num_centers=15,k=9,centers,labels)
{
numcol = ncol(centers)
prlabels = apply(xx,MARGIN = 1,predict_center,centers,k)
point_total = xx[,1:numcol]
point_total_sum = apply(point_total,2,sum)
point_total_ratio_up = apply(point_total,2,function(x){sum(x>0)/sum(x!=0)})
point_total_ratio_down = apply(point_total,2,function(x){sum(x<0)/sum(x!=0)})
dt_sep = data.frame()
dt = data.frame()
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
count = length(index)
point = label_data[,(k+1):numcol]
point_col_sum = apply(point,2,sum)
point_col_ratio = apply(point,2,function(x){sum(x>0)/sum(x!=0)})
point_col_sum = cbind(as.data.frame(t(point_col_sum)))
point_col_ratio = cbind(as.data.frame(t(point_col_ratio)))
colnames(point_col_sum) = paste(colnames(point_col_sum),'sum',sep='_')
colnames(point_col_ratio) = paste(colnames(point_col_ratio),'ratio',sep='_')
point_col = cbind(point_col_ratio,point_col_sum)
point_col = cbind(data.frame(center=i,count=count),point_col)
dt_sep = rbind(dt_sep,point_col)
point_sum = apply(point,1,sum)
total = sum(point_sum)
upratio = sum(point_sum>0)/sum(point_sum!=0)
pvalue = prop.test(count*upratio,count)
uppvalue = pvalue$p.value
r = data.frame(center=i,sum = total,upratio = upratio,count,uppvalue=uppvalue)
dt = rbind(dt,r)
}
#good_dt = subset(dt, dt$uppvalue < 0.05  & dt$count > 100)
# print(dt_sep)
#  print(good_dt)
return(list(dt,dt_sep))
}
xx_dcast_dc = flat_time_data(data,diffclose=T,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
xx_dcast_dc = flat_time_data(data,diffclose=T,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
dt_open = basic_stats(data,num_centers=15,k=9,centers=centers,labels=labels)
centers
numcol = ncol(centers)
xx
point_total = xx[,1:numcol]
basic_stats = function(xx,num_centers=15,k=9,centers,labels)
{
numcol = ncol(centers)
prlabels = apply(xx,MARGIN = 1,predict_center,centers,k)
point_total = xx[,1:numcol]
point_total_sum = apply(point_total,2,sum)
point_total_ratio_up = apply(point_total,2,function(x){sum(x>0)/sum(x!=0)})
point_total_ratio_down = apply(point_total,2,function(x){sum(x<0)/sum(x!=0)})
dt_sep = data.frame()
dt = data.frame()
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
count = length(index)
point = label_data[,(k+1):numcol]
point_col_sum = apply(point,2,sum)
point_col_ratio = apply(point,2,function(x){sum(x>0)/sum(x!=0)})
point_col_sum = cbind(as.data.frame(t(point_col_sum)))
point_col_ratio = cbind(as.data.frame(t(point_col_ratio)))
colnames(point_col_sum) = paste(colnames(point_col_sum),'sum',sep='_')
colnames(point_col_ratio) = paste(colnames(point_col_ratio),'ratio',sep='_')
point_col = cbind(point_col_ratio,point_col_sum)
point_col = cbind(data.frame(center=i,count=count),point_col)
dt_sep = rbind(dt_sep,point_col)
point_sum = apply(point,1,sum)
total = sum(point_sum)
upratio = sum(point_sum>0)/sum(point_sum!=0)
pvalue = prop.test(count*upratio,count)
uppvalue = pvalue$p.value
r = data.frame(center=i,sum = total,upratio = upratio,count,uppvalue=uppvalue)
dt = rbind(dt,r)
}
#good_dt = subset(dt, dt$uppvalue < 0.05  & dt$count > 100)
# print(dt_sep)
#  print(good_dt)
return(list(dt,dt_sep))
}
dt_diffclose = basic_stats(xx,num_centers=15,k=9,centers=centers,labels=labels)
dt_diffclose = basic_stats(xx,num_centers=15,k=9,centers=centers,labels=labels)
dt_dc = dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
good_dt = subset(dt_dc, dt_dc$uppvalue < 0.05 )# & dt_dc$count > 100)
xx_dcast = flat_time_data(data,diffclose=F,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
dt_open = basic_stats(xx,num_centers=15,k=9,centers=centers,labels=labels)
dt_op = dt_open[[1]]
dt_op_sep = dt_open[[2]]
k = 9
num_centers = 15
k = 9
num_centers = 15
xx_dcast = flat_time_data(data,diffclose=T,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
dt_diffclose = basic_stats(xx,num_centers=num_centers,k=k,centers=centers,labels=labels)
dt_dc = dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
good_dt = subset(dt_dc, dt_dc$uppvalue < 0.05 )# & dt_dc$count > 100)
xx_dcast = flat_time_data(data,diffclose=F,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
dt_open = basic_stats(xx,num_centers=num_centers,k=k,centers=centers,labels=labels)
dt_op = dt_open[[1]]
dt_op_sep = dt_open[[2]]
good_dt
dt_dc
predict_center(v,centers)
getWindData = function()
{
date = as.character(Sys.Date())
opentime = paste(date,'09:00:00',sep=' ')
closetime = paste(date,'15:15:00',sep=' ')
w_wsi_data<-w.wsi("C1705.DCE","open,high,low,close,volume,amt",opentime,closetime,"BarSize=15")
#查询主力合约
#w_wss_data<-w.wss('C.DCE','trade_code')
wsi_data = w_wsi_data[[2]]
pricedata = xts(wsi_data[,2:7],order.by = as.POSIXct(wsi_data$DATETIME))
startdata = pricedata[1,]
pricedata = pricedata[2:nrow(pricedata),]
index(pricedata) = index(pricedata) - minutes(15)
return(pricedata)
}
pricedata = getWindData()
y = diff(pricedata$close)
y[1] = (pricedata[1,]$close - pricedata[1,]$open)
v1 = as.numeric(y)
y = pricedata$close - pricedata$open
v2 = as.numeric(y)
v1 v2
predict_center(v2,centers,k)
k = 9
num_centers = 15
xx_dcast = flat_time_data(data,diffclose=T,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
dt_diffclose = basic_stats(xx,num_centers=num_centers,k=k,centers=centers,labels=labels)
dt_dc = dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
good_dt = subset(dt_dc, dt_dc$uppvalue < 0.05 )# & dt_dc$count > 100)
predict_center(v1,centers,k)
xx_dcast = flat_time_data(data,diffclose=F,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers_op = result[['centers']]
labels_op = result[['labels']]
dt_open = basic_stats(xx,num_centers=num_centers,k=k,centers=centers_op,labels=labels_op)
dt_op = dt_open[[1]]
dt_op_sep = dt_open[[2]]
predict_center(v2,centers,k)
dt_op_sep
dt_dc_sep
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
table(labels)
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
table(labels)
dt_diffclose = basic_stats(xx,num_centers=num_centers,k=k,centers=centers,labels=labels)
dt_dc = dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
dt_dc
dt_dc_sep
table(labels)
dt_dc_sep
predict_center(v1,centers,k)
good_dt
cluster = function(xx,center_num=10,isplot=F,seed=1234)
{
set.seed(seed)
xx_scaled = scale(xx)
fit = kmpp(xx_scaled,center_num,iter.max = 50000,nstart=100)
centers = fit$centers
labels = fit$cluster
centers_unscaled = unscale(centers,xx_scaled)
centers = centers_unscaled
if(isplot)
{
windows(1000,1000)
plot(centers[1,],type='l',ylim = range(max(centers),min(centers)),xlab='',xaxt = 'n') #ylim = range(-6,6)
axis(1, 1:length(centers[1,]),names(centers[1,]))
for( i in 2:n)
{
points(centers[i,],type='l',col=i)
}
}
return(list(centers=centers,labels=labels ))
}
k = 9
num_centers = 15
xx_dcast = flat_time_data(data,diffclose=T,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
dt_diffclose = basic_stats(xx,num_centers=num_centers,k=k,centers=centers,labels=labels)
dt_dc = dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
good_dt = subset(dt_dc, dt_dc$uppvalue < 0.05 )# & dt_dc$count > 100)
predict_center(v1,centers,k)
xx_dcast = flat_time_data(data,diffclose=F,freq=freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
result = cluster(xx,num_centers)
centers_op = result[['centers']]
labels_op = result[['labels']]
dt_open = basic_stats(xx,num_centers=num_centers,k=k,centers=centers_op,labels=labels_op)
dt_op = dt_open[[1]]
dt_op_sep = dt_open[[2]]
predict_center(v2,centers,k)
dt_dc_sep
dt_op_sep
pricedata = getWindData()
y = diff(pricedata$close)
y[1] = (pricedata[1,]$close - pricedata[1,]$open)
v1 = as.numeric(y)
y = pricedata$close - pricedata$open
v2 = as.numeric(y)
k = length(v1)
k
k = 9
k = 10
predict_center(v1,centers,k)
predict_center(v2,centers,k)
k = 9
predict_center(v2,centers,k)
predict_center(v1,centers,k)
good_dt
dt_sep
dt_op_sep
k = 10
dt_diffclose = basic_stats(xx,num_centers=num_centers,k=k,centers=centers,labels=labels)
dt_dc = dt_diffclose[[1]]
dt_dc_sep = dt_diffclose[[2]]
good_dt = subset(dt_dc, dt_dc$uppvalue < 0.05 )# & dt_dc$count > 100)
predict_center(v1,centers,k)
dt_open = basic_stats(xx,num_centers=num_centers,k=k,centers=centers_op,labels=labels_op)
dt_op = dt_open[[1]]
dt_op_sep = dt_open[[2]]
predict_center(v2,centers,k)
dt_dc_sep
pricedata = getWindData()
y = diff(pricedata$close)
y[1] = (pricedata[1,]$close - pricedata[1,]$open)
v1 = as.numeric(y)
y = pricedata$close - pricedata$open
v2 = as.numeric(y)
predict_center(v1,centers,length(v1))
predict_center(v2,centers,length(v2))
dt_op_sep
dt_dc_sep
k = 12
dt_open = basic_stats(xx,num_centers=num_centers,k=k,centers=centers_op,labels=labels_op)
dt_op = dt_open[[1]]
dt_op_sep = dt_open[[2]]
dt_op_sep
