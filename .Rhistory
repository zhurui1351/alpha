data = to_minutes(data,freq)
head(data)
pricedata = data
k = 30
times = index(pricedata)
i = 1
newtime =  times[i]
ps = pricedata[i:(i+k-1)]
open = as.numeric(ps[1,]$Open)
high = max(as.numeric(ps$High))
low = min(as.numeric(ps$Low))
close = tail(ps,1)$Close
vol = sum(as.numeric(ps$Vol))
oi = tail(ps,1)$Oi
r = xts(data.frame(Open=open,High=high,Low=low,Close=close,Vol=vol,Oi=oi), order.by = newtime)
rs = r
i = i + k
while(i < length(times))
{
# print(i)
newtime =  times[i]
ps = pricedata[i:(i+k-1)]
open = as.numeric(ps[1,]$Open)
high = max(as.numeric(ps$High))
low = min(as.numeric(ps$Low))
close = tail(ps,1)$Close
vol = sum(as.numeric(ps$Vol))
oi = tail(ps,1)$Oi
r = xts(data.frame(Open=open,High=high,Low=low,Close=close,Vol=vol,Oi=oi), order.by = newtime)
rs = rbind(rs,r)
i = i + k
}
i
length(times)
616725 / 5
616725 / 30
times[i]
head(rs)
head(rs,10)
dbname = 'china_future_ods_m'
tbname = 'dlcmi'
data = getdata(dbname,tbname,freq=5)
log
log(191670997)
log(190844334)
xx_dcast = flat_time_data(data)
xx = xx_dcast[,2:ncol(xx_dcast)]
num_centers = 15
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
k = 20
prlabels = apply(xx,MARGIN = 1,compute_distance,centers,k)
table(labels)
table(prlabels)
sum(labels == prlabels) / length(labels)
dt = data.frame()
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
point = label_data[,k:15]
point = apply(point,1,sum)
total = sum(point)
ratio = sum(point>0)/length(point)
r = data.frame(n=i,sum = total,ratio = ratio,count = length(index))
dt = rbind(dt,r)
}
print(dt)
centers
labels
k = 20
prlabels = apply(xx,MARGIN = 1,compute_distance,centers,k)
table(labels)
table(prlabels)
sum(labels == prlabels) / length(labels)
label_data
colnum
ncol(label_data)
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
label_data
head(xx)
head(xx)
head(data)
source('src/config/include.R',encoding='utf-8')
getdata = function(dbname,tbname,freq=15)
{
#dbname = 'china_future_ods_m'
#tbname = 'dlcmi'
data = getTableData(dbname,tbname)
data = xts(data[,c('Open','High','Low','Close','Vol','Oi')],order.by=as.POSIXct(data$datetime,format='%Y-%m-%d %H:%M:%S'))
data = to_minutes(data,freq)
return(data)
}
data = getdata(dbname,tbname,freq=5)
xx_dcast = flat_time_data(data)
xx = xx_dcast[,2:ncol(xx_dcast)]
num_centers = 15
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
k = 20
prlabels = apply(xx,MARGIN = 1,compute_distance,centers,k)
table(labels)
table(prlabels)
sum(labels == prlabels) / length(labels)
dt = data.frame()
numcol = ncol(centers)
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
point = label_data[,k:numcol]
point = apply(point,1,sum)
total = sum(point)
ratio = sum(point>0)/length(point)
r = data.frame(n=i,sum = total,ratio = ratio,count = length(index))
dt = rbind(dt,r)
}
print(dt)
head(data)
numcol = ncol(centers)
numcol
centers
xx_dcast = flat_time_data(data)
xx = xx_dcast[,2:ncol(xx_dcast)]
head(xx)
head(data)
xx_dcast = flat_time_data(data)
head(xx_dcast)
by = paste(freq,' min')
by
by = paste(freq,'min')
by
get_day_trade_min_series = function(freq=15)
{
by = paste(freq,'min')
time = seq(as.POSIXct('2001-01-01 09:00:00'),as.POSIXct('2001-01-01 15:00:00'),by='15 min')
time = as.character(time)
time = substr(time,12,19)
return(time)
}
flat_time_data = function(data,diffclose=T)
{
time = as.character(index(data))
time = substr(time,12,19)
times = get_day_trade_min_series()
data_open = data[time %in% c('09:00:00'),]
data_open_votile = (data_open$Close - data_open$Open)
if(diffclose)
{
votile = as.data.frame(diff(data$Close))
votile[time %in% c('09:00:00'),] = data_open_votile
}
else
{
votile = as.data.frame(data$Close - data$Open)
}
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
votile = subset(votile,time %in% times)
xx_dcast = dcast(votile,day ~ time,value.var='change')
return(xx_dcast)
}
xx_dcast = flat_time_data(data)
xx = xx_dcast[,2:ncol(xx_dcast)]
xx[1,]
head(xx_dcast)
xx_dcast = flat_time_data(data,freq)
head(xx_dcast)
flat_time_data = function(data,diffclose=T,freq=15)
{
time = as.character(index(data))
time = substr(time,12,19)
times = get_day_trade_min_series(freq)
data_open = data[time %in% c('09:00:00'),]
data_open_votile = (data_open$Close - data_open$Open)
if(diffclose)
{
votile = as.data.frame(diff(data$Close))
votile[time %in% c('09:00:00'),] = data_open_votile
}
else
{
votile = as.data.frame(data$Close - data$Open)
}
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
votile = subset(votile,time %in% times)
xx_dcast = dcast(votile,day ~ time,value.var='change')
return(xx_dcast)
}
freq
freq=5
data = getdata(dbname,tbname,freq)
head(data)
xx_dcast = flat_time_data(data,freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
xx[1,]
flat_time_data
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface')
flat_time_data = function(data,diffclose=T,freq=15)
{
time = as.character(index(data))
time = substr(time,12,19)
times = get_day_trade_min_series(freq)
data_open = data[time %in% c('09:00:00'),]
data_open_votile = (data_open$Close - data_open$Open)
if(diffclose)
{
votile = as.data.frame(diff(data$Close))
votile[time %in% c('09:00:00'),] = data_open_votile
}
else
{
votile = as.data.frame(data$Close - data$Open)
}
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
votile = subset(votile,time %in% times)
xx_dcast = dcast(votile,day ~ time,value.var='change')
return(xx_dcast)
}
cluster = function(xx,center_num=10,isplot=F)
{
xx_scaled = scale(xx)
fit = kmeans(xx_scaled,center_num,iter.max = 100)
centers = fit$centers
labels = fit$cluster
centers_unscaled = unscale(centers,xx_scaled)
centers = centers_unscaled
if(isplot)
{
windows(1000,1000)
plot(centers[1,],type='l',ylim = range(max(centers),min(centers)),xlab='',xaxt = 'n') #ylim = range(-6,6)
axis(1, 1:length(centers[1,]),names(centers[1,]))
for( i in 2:n)
{
points(centers[i,],type='l',col=i)
}
}
return(list(centers=centers,labels=labels ))
}
compute_distance = function(v,centers,k=9,isplot = F)
{
vv = v[1:k]
sample_centers = apply(centers,MARGIN = 1 ,function(x,k){return(x[1:k])},k)
sample_centers = t(sample_centers)
distance = apply(sample_centers,MARGIN = 1 ,function(x,v){dist(rbind(x,v))},vv)
min_index = which.min(distance)
if(isplot)
{
cen = as.numeric(centers[min_index,])
plot(v,col = 'blue',xlim=c(1,16),xaxt='n')
points(cen,col='red')
abline(h = 0,col='yellow')
axis(1, 1:length(centers[1,]),names(centers[1,]))
}
return(min_index)
}
xx_dcast = flat_time_data(data,freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
xx[1,]
get_day_trade_min_series(freq)
freq
source('src/config/include.R',encoding='utf-8')
sourceDir('src/dw/interface')
flat_time_data = function(data,diffclose=T,freq=15)
{
time = as.character(index(data))
time = substr(time,12,19)
times = get_day_trade_min_series(freq)
data_open = data[time %in% c('09:00:00'),]
data_open_votile = (data_open$Close - data_open$Open)
if(diffclose)
{
votile = as.data.frame(diff(data$Close))
votile[time %in% c('09:00:00'),] = data_open_votile
}
else
{
votile = as.data.frame(data$Close - data$Open)
}
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
votile = subset(votile,time %in% times)
xx_dcast = dcast(votile,day ~ time,value.var='change')
return(xx_dcast)
}
cluster = function(xx,center_num=10,isplot=F)
{
xx_scaled = scale(xx)
fit = kmeans(xx_scaled,center_num,iter.max = 100)
centers = fit$centers
labels = fit$cluster
centers_unscaled = unscale(centers,xx_scaled)
centers = centers_unscaled
if(isplot)
{
windows(1000,1000)
plot(centers[1,],type='l',ylim = range(max(centers),min(centers)),xlab='',xaxt = 'n') #ylim = range(-6,6)
axis(1, 1:length(centers[1,]),names(centers[1,]))
for( i in 2:n)
{
points(centers[i,],type='l',col=i)
}
}
return(list(centers=centers,labels=labels ))
}
compute_distance = function(v,centers,k=9,isplot = F)
{
vv = v[1:k]
sample_centers = apply(centers,MARGIN = 1 ,function(x,k){return(x[1:k])},k)
sample_centers = t(sample_centers)
distance = apply(sample_centers,MARGIN = 1 ,function(x,v){dist(rbind(x,v))},vv)
min_index = which.min(distance)
if(isplot)
{
cen = as.numeric(centers[min_index,])
plot(v,col = 'blue',xlim=c(1,16),xaxt='n')
points(cen,col='red')
abline(h = 0,col='yellow')
axis(1, 1:length(centers[1,]),names(centers[1,]))
}
return(min_index)
}
xx_dcast = flat_time_data(data,freq)
xx = xx_dcast[,2:ncol(xx_dcast)]
xx[1,]
freq
get_day_trade_min_series(freq)
time = as.character(index(data))
time = substr(time,12,19)
time
xx_dcast = flat_time_data(data,freq=freq)
xx_dcast
head(xx_dcast)
xx = xx_dcast[,2:ncol(xx_dcast)]
num_centers = 15
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
k = 20
prlabels = apply(xx,MARGIN = 1,compute_distance,centers,k)
table(labels)
table(prlabels)
sum(labels == prlabels) / length(labels)
dt = data.frame()
numcol = ncol(centers)
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
point = label_data[,k:numcol]
point = apply(point,1,sum)
total = sum(point)
ratio = sum(point>0)/length(point)
r = data.frame(n=i,sum = total,ratio = ratio,count = length(index))
dt = rbind(dt,r)
}
print(dt)
sd(diff(data$Close))
sd(diff(data$Close),na.omit=T)
?sd
sd(diff(data$Close),na.rm=T)
num_centers = 10
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
k = 20
prlabels = apply(xx,MARGIN = 1,compute_distance,centers,k)
table(labels)
table(prlabels)
sum(labels == prlabels) / length(labels)
dt = data.frame()
numcol = ncol(centers)
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
point = label_data[,k:numcol]
point = apply(point,1,sum)
total = sum(point)
ratio = sum(point>0)/length(point)
r = data.frame(n=i,sum = total,ratio = ratio,count = length(index))
dt = rbind(dt,r)
}
print(dt)
numcol
k = 25
prlabels = apply(xx,MARGIN = 1,compute_distance,centers,k)
table(labels)
table(prlabels)
sum(labels == prlabels) / length(labels)
dt = data.frame()
numcol = ncol(centers)
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
point = label_data[,k:numcol]
point = apply(point,1,sum)
total = sum(point)
ratio = sum(point>0)/length(point)
r = data.frame(n=i,sum = total,ratio = ratio,count = length(index))
dt = rbind(dt,r)
}
print(dt)
num_centers = 10
result = cluster(xx,num_centers)
centers = result[['centers']]
labels = result[['labels']]
k = 30
prlabels = apply(xx,MARGIN = 1,compute_distance,centers,k)
table(labels)
table(prlabels)
sum(labels == prlabels) / length(labels)
dt = data.frame()
numcol = ncol(centers)
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
point = label_data[,k:numcol]
point = apply(point,1,sum)
total = sum(point)
ratio = sum(point>0)/length(point)
r = data.frame(n=i,sum = total,ratio = ratio,count = length(index))
dt = rbind(dt,r)
}
print(dt)
?*.text
?*.test
prop.test(c(502*0.38,502*0.5),c(502,502))
?prop.test
prop.test(c(502*0.1,502*0.5),c(502,502))
prop.test(c(502*0.1,502*0.5),c(502,502),alternative='less')
prop.test(c(502*0.1,502*0.5),c(502,502),alternative='greater')
heads <- rbinom(1, size = 100, prob = .5)
prop.test(heads, 100)          # continuity correction TRUE by default
heads
dt
prop.test(502*0.38, 502)          # continuity correction TRUE by default
prop.test(9*0.66, 9)          # continuity correction TRUE by default
prop.test(347*0.46, 347)          # continuity correction TRUE by default
a = prop.test(347*0.46, 347)          # continuity correction TRUE by default
a
a$p.value
dt
dt$pvalue = prop.test(dt$count*dt$ratio,dt$count)
dt
pvalue = prop.test(dt$count*dt$ratio,dt$count)
pvalue
pvalue$p.value
pvalue = prop.test(count*ratio,count)
count
count = length(index)
pvalue = prop.test(count*ratio,count)
pvalue = pvalue$p.value
dt = data.frame()
numcol = ncol(centers)
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
point = label_data[,k:numcol]
point = apply(point,1,sum)
total = sum(point)
ratio = sum(point>0)/length(point)
count = length(index)
pvalue = prop.test(count*ratio,count)
pvalue = pvalue$p.value
r = data.frame(n=i,sum = total,ratio = ratio,count)
dt = rbind(dt,r)
}
print(dt)
dt = data.frame()
numcol = ncol(centers)
for( i in 1:num_centers)
{
cluster_n = i
index = which(prlabels == cluster_n)
label_data = xx[index,]
point = label_data[,k:numcol]
point = apply(point,1,sum)
total = sum(point)
ratio = sum(point>0)/length(point)
count = length(index)
pvalue = prop.test(count*ratio,count)
pvalue = pvalue$p.value
r = data.frame(n=i,sum = total,ratio = ratio,count,pvalue=pvalue)
dt = rbind(dt,r)
}
print(dt)
prop.test(9*0.6666667,9)
options(scipen =200)
dt
subset(dt,dt$pvalue < 0.05 & dt$count > 100)
