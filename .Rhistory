xx[,2:ncol(xx)]
xx = xx[,2:ncol(xx)]
?kmeans
kmeans(xx,5)
fit = kmeans(xx,5)
fit$centers
centers = fit$centers
centers[,]
centers[1,]
plot(centers[1,])
plot(centers[2,])
plot(centers[3,])
plot(centers[4,])
plot(centers[5,])
plot(centers[1,])
plot(centers[2,])
head(votile)
fit = kmeans(xx,10)
centers = fit$centers
plot(center[1,])
plot(centers[1,])
plot(centers[2,])
plot(centers[3,])
plot(centers[4,])
plot(centers[5,])
plot(centers[6,])
dbname = 'china_future_ods_m'
tbname = 'dlcmi'
data = getTableData(dbname,tbname)
data = xts(data[,c('Open','High','Low','Close','Vol','Oi')],order.by=as.POSIXct(data$datetime,format='%Y-%m-%d %H:%M:%S'))
data = to_minutes(data,15)
time = as.character(index(data))
time = substr(time,12,19)
votile = as.data.frame(data$Close - data$Open)
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
xx = dcast(votile,day ~ time,value.var='Close')
xx = xx[,2:ncol(xx)]
fit = kmeans(xx,10)
centers = fit$centers
fit = kmeans(xx,5)
centers = fit$centers
plot(centers[1,])
plot(centers[2,])
?kmeans
fit = kmeans(xx,5,iter.max = 100)
centers = fit$centers
plot(centers[2,])
plot(centers[1,])
plot(centers[2,])
?options
p = par(mfrow=c(5,1))
centers = fit$centers
plot(centers[2,])
p = par(mfrow=c(5,5))
centers = fit$centers
plot(centers[2,])
?window
?windows
windows(400,800)
p = par(mfrow=c(5,5))
centers = fit$centers
plot(centers[2,])
windows(400,800)
p = par(mfrow=c(5,5))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
for( i in 1:5)
{
plot(centers[i,])
}
windows(800,800)
p = par(mfrow=c(5,1))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
p = par(mfrow=c(5,1))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
i = 1
plot(centers[i,])
centers
fit = kmeans(xx,10,iter.max = 100)
centers = fit$centers
centers
fit$cluster
labels = fit$centers
which(lables == 3)
labels = fit$centers
which(labels == 3)
labels
labels = fit$cluster
which(labels == 3)
plot(xx[index[1],])
xx
index[1]
index = which(labels == 3)
index[1]
plot(xx[index[1],])
xx[index[1],]
plot(xx[index[1],])
plot(as.numeric(xx[index[1],]))
plot(as.numeric(xx[index[1],]))
windows(800,800)
plot(as.numeric(xx[index[1],]))
?plot
points(as.numeric(xx[index[1],])
)
plot(as.numeric(xx[index[1],]))
windows(800,800)
plot(as.numeric(xx[index[1],]))
points(as.numeric(xx[index[1],]))
points(as.numeric(xx[index[2],]))
windows(800,800)
plot(as.numeric(xx[index[1],]),type='l',color = 'red')
points(as.numeric(xx[index[2],])，type='l',color = 'yellow')
?plot
plot(as.numeric(xx[index[1],]),type='l',col = 'red')
points(as.numeric(xx[index[2],])，type='l',col = 'yellow')
points(as.numeric(xx[index[2],]),type='l',col = 'yellow')
windows(800,800)
plot(as.numeric(xx[index[1],]),type='l',col = 'red')
points(as.numeric(xx[index[2],]),type='l',col = 'blue')
windows(800,800)
plot(centers[3,],type='l',col = 'green')
plot(as.numeric(xx[index[1],]),type='l',col = 'red')
points(as.numeric(xx[index[2],]),type='l',col = 'blue')
points(as.numeric(xx[index[2],]),type='l',col = 'blue')
windows(800,800)
plot(centers[3,],type='l',col = 'green')
points(as.numeric(xx[index[1],]),type='l',col = 'red')
points(as.numeric(xx[index[2],]),type='l',col = 'blue')
fit = kmeans(xx,5,iter.max = 100)
centers = fit$centers
centers
?svm
votile
head()
head(xx)
xx$lable = lables
xx$lable = labels
svm(lable~.,data=xx)
votile = as.data.frame(data$High - data$Open)
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
xx = dcast(votile,day ~ time,value.var='Close')
xx = xx[,2:ncol(xx)]
votile = as.data.frame(change = (data$High - data$Open))
votile = as.data.frame(data$High - data$Open)
colnames(votile)
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
xx = dcast(votile,day ~ time,value.var='change')
xx = xx[,2:ncol(xx)]
fit = kmeans(xx,5,iter.max = 100)
centers = fit$centers
centers
head(data)
head(data,10)
head(data,100)
path = 'D:/BaiduYunDownload/data'
files = list.files(
path,pattern = 'DLcs01.*' ,recursive = T,ignore.case = T,full.names = T
)
files
files = list.files(
path,pattern = 'DLm01.*' ,recursive = T,ignore.case = T,full.names = T
)
files
source('src/config/include.R',encoding='utf-8')
source('src/config/db_config.R',encoding='utf-8')
source('src/dw/collectdata/collectfromtaobao.R',encoding='utf-8')
mydb = 'china_future_ods_m'
mydb_day = 'china_future_ods_day'
search_path = 'D:/BaiduYunDownload/data'
overwrite = T
corp = list(c('dlc01','DLC01.*'),c('dlc03','DLC03.*'),c('dlc05','DLC05.*'),c('dlc07','DLC07.*'),c('dlc09','DLC09.*'),c('dlc11','DLC11.*'))
soybean_a = list(c('dlax01','DLAX01.*'),c('dlax03','DLAX03.*'),c('dlax05','DLAX05.*'),c('dlax07','DLAX07.*'),c('dlax09','DLAX09.*'),c('dlax11','DLAX11.*'),
c('dlay01','DLAY01.*'),c('dlay03','DLAY03.*'),c('dlay05','DLAY05.*'),c('dlay07','DLAY07.*'),c('dlay09','DLAY09.*'),c('dlay11','DLAY11.*'))
soybean_b = list(c('dlb01','DLb01.*'),c('dlb03','DLb03.*'),c('dlb05','DLb05.*'),c('dlb07','DLb07.*'),c('dlb09','DLb09.*'),c('dlb11','DLb11.*'))
#豆粕
soyabean = list(c('dlm01','DLm01.*'),c('dlm03','DLm03.*'),c('dlm05','DLm05.*'),c('dlm06','DLm06.*'),c('dlm07','DLm07.*'),c('dlm08','DLm08.*'),c('dlm09','DLm09.*'),c('dlm11','DLm11.*'),c('dlm12','DLm12.*'))
symbols = list(soyabean)
for(i in 1:length(symbols))
{
coms = symbols[[i]]
for(com in coms)
{
tbname = com[1]
pattern = com[2]
print(com[1])
data = collectdatafromtaobao(search_path,pattern)
daydata = to_day(data)
index(data) = index(data) - 60
data = as.data.frame(data)
data$datetime = rownames(data)
daydata = as.data.frame(daydata)
daydata$datetime = rownames(daydata)
writeToMysqltable(data,mydb,tbname,overwrite)
writeToMysqltable(daydata,mydb_day,tbname,overwrite)
}
}
soybean_oil = list(c('dly01','dly03','dly05','dly07','dly08','dly09','dly11','dly12'),main='dlymi',symbol='dly')
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
source('src/config/include.R',encoding='utf-8')
source('src/config/db_config.R',encoding='utf-8')
source('src/dw/collectdata/collectfromtaobao.R',encoding='utf-8')
mydb = 'china_future_ods_m'
mydb_day = 'china_future_ods_day'
search_path = 'D:/BaiduYunDownload/data'
overwrite = T
corp = list(c('dlc01','DLC01.*'),c('dlc03','DLC03.*'),c('dlc05','DLC05.*'),c('dlc07','DLC07.*'),c('dlc09','DLC09.*'),c('dlc11','DLC11.*'))
soybean_a = list(c('dlax01','DLAX01.*'),c('dlax03','DLAX03.*'),c('dlax05','DLAX05.*'),c('dlax07','DLAX07.*'),c('dlax09','DLAX09.*'),c('dlax11','DLAX11.*'),
c('dlay01','DLAY01.*'),c('dlay03','DLAY03.*'),c('dlay05','DLAY05.*'),c('dlay07','DLAY07.*'),c('dlay09','DLAY09.*'),c('dlay11','DLAY11.*'))
soybean_b = list(c('dlb01','DLb01.*'),c('dlb03','DLb03.*'),c('dlb05','DLb05.*'),c('dlb07','DLb07.*'),c('dlb09','DLb09.*'),c('dlb11','DLb11.*'))
#豆粕
soybean_meal = list(c('dlm01','DLm01.*'),c('dlm03','DLm03.*'),c('dlm05','DLm05.*'),c('dlm06','DLm06.*'),c('dlm07','DLm07.*'),c('dlm08','DLm08.*'),c('dlm09','DLm09.*'),c('dlm11','DLm11.*'),c('dlm12','DLm12.*'))
#豆油
soybean_oil = list(c('dly01','DLY01.*'),c('dly03','DLY03.*'),c('dly05','DLY05.*'),c('dly07','DLY07.*'),c('dly08','DLY08.*'),c('dly09','DLY09.*'),c('dly11','DLY11.*'),c('dly12','DLY12.*'))
symbols = list(soybean_oil)
for(i in 1:length(symbols))
{
coms = symbols[[i]]
for(com in coms)
{
tbname = com[1]
pattern = com[2]
print(com[1])
data = collectdatafromtaobao(search_path,pattern)
daydata = to_day(data)
index(data) = index(data) - 60
data = as.data.frame(data)
data$datetime = rownames(data)
daydata = as.data.frame(daydata)
daydata$datetime = rownames(daydata)
writeToMysqltable(data,mydb,tbname,overwrite)
writeToMysqltable(daydata,mydb_day,tbname,overwrite)
}
}
warnings()
china_future_info_db = 'china_future_info'
china_future_ods_day = 'china_future_ods_day'
china_future_ods_m = 'china_future_ods_m'
#大连交易所
#豆一
soybean_a = list(contract = c('dlax01','dlax03','dlax05','dlax07','dlax09','dlax11',
'dlay01','dlay03','dlay05','dlay07','dlay09','dlay11'),main='dlami',symbol='dla')
#玉米
corp = list(contract = c('dlc01','dlc03','dlc05','dlc07','dlc09','dlc11'),main='dlcmi',symbol='dlc')
#豆二
soybean_b = list(contract=c('dlb01','dlb03','dlb05','dlb07','dlb09','dlb11'),main='dlbmi',symbol='dlb')
#豆粕
soyabean_meal = list(contract=c('dlm01','dlm03','dlm05','dlm06','dlm07','dlm08','dlm09','dlm11','dlm12'),main='dlmmi',symbol='dlm')
#豆油
soybean_oil = list(c('dly01','dly03','dly05','dly07','dly08','dly09','dly11','dly12'),main='dlymi',symbol='dly')
#china_future_symbols = list('corp'=corp,'soybean_a'=soybean_a,'soybean_b'=soybean_b,'soyabean_meal'=soyabean_meal)
china_future_symbols = list('soybean_oil'=soybean_oil)
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
soybean_oil
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
china_future_symbols = list('soybean_oil'=soybean_oil)
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
future
soybean_oil = list(contract=c('dly01','dly03','dly05','dly07','dly08','dly09','dly11','dly12'),main='dlymi',symbol='dly')
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
source('src/config/include.R',encoding='utf-8')
source('src/dw/initdata/init_main_contract_func.R',encoding='utf-8')
for(i in 1:length(china_future_symbols))
{
future = china_future_symbols[[i]]
contracts = future[['contract']]
main = future[['main']]
symbol =  future[['symbol']]
init_main_contract_day(contracts,china_future_info_db,china_future_ods_day,symbol,main)
init_main_force_m(contracts,china_future_info_db,china_future_ods_m,symbol,main)
}
source('src/config/include.R',encoding='utf-8')
tbname = 'dlymi'
data = getTableData(dbname,tbname)
dbname = 'china_future_ods_m'
tbname = 'dlymi'
data = getTableData(dbname,tbname)
data = xts(data[,c('Open','High','Low','Close','Vol','Oi')],order.by=as.POSIXct(data$datetime,format='%Y-%m-%d %H:%M:%S'))
data = to_minutes(data,15)
time = as.character(index(data))
time = substr(time,12,19)
votile = as.data.frame(data$High - data$Open)
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
xx = dcast(votile,day ~ time,value.var='change')
xx = xx[,2:ncol(xx)]
fit = kmeans(xx,5,iter.max = 100)
xx
head(data)
time = as.character(index(data))
time = substr(time,12,19)
votile = as.data.frame(data$High - data$Open)
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
head(votile)
xx = dcast(votile,day ~ time,value.var='change')
xx
head(xx)
head(votile)
head(votile,100)
head(data)
head(data,100)
head(data,1000)
votile
dcast(votile,day ~ time,value.var='change')
votile
?dcast
xx = dcast(votile,day ~ time,value.var='change',verbose=T)
xx
head(votile)
dcast(head(votile),day ~ time,value.var='change',verbose=T)
dcast(tail(votile),day ~ time,value.var='change',verbose=T)
dcast(votile,day ~ time,value.var='change',verbose=T)
head(xx)
dcast(head(votile),day ~ time,value.var='change',verbose=T)
xx = dcast(votile,day ~ time,value.var='change')
head(xx,1)
head(data)
na.omit(xx)
xx = na.omit(xx)
head(xx)
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'))
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'),by=15)
?seq.POSIXt
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'),by='min')
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'),by='min',length.out=15)
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'),by='min',length.out=15)
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'),by='min',length.out=10)
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'),by='15min')
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'),by='15m')
seq(as.POSIXct('2001-01-01 00:00:00'),as.POSIXct('2001-01-02 00:00:00'),by='15 min')
seq(as.POSIXct('2001-01-01 09:00:00'),as.POSIXct('2001-01-02 15:00:00'),by='15 min')
time = seq(as.POSIXct('2001-01-01 09:00:00'),as.POSIXct('2001-01-02 15:00:00'),by='15 min')
time = as.character(time)
time
substr(time[1],12,19)
substr(time[1],12,18)
substr(time[1],12,19)
time = substr(time,12,19)
get_min_series = function()
{
time = seq(as.POSIXct('2001-01-01 09:00:00'),as.POSIXct('2001-01-02 15:00:00'),by='15 min')
time = as.character(time)
time = substr(time,12,19)
return(time)
}
times = get_min_series()
time
subset(votile,time %in% times)
votile = subset(votile,time %in% times)
xx = dcast(votile,day ~ time,value.var='change')
xx
votile
votile = subset(votile,time %in% times)
tail(votile)
tail(votile,100)
times
time = seq(as.POSIXct('2001-01-01 09:00:00'),as.POSIXct('2001-01-02 15:00:00'),by='15 min')
time
get_min_series = function()
{
time = seq(as.POSIXct('2001-01-01 09:00:00'),as.POSIXct('2001-01-01 15:00:00'),by='15 min')
time = as.character(time)
time = substr(time,12,19)
return(time)
}
times = get_min_series()
votile = subset(votile,time %in% times)
xx = dcast(votile,day ~ time,value.var='change')
xx
fit = kmeans(xx,5,iter.max = 100)
head(xx)
head(xx)
which(is.na(xx))
xx = xx[,2:ncol(xx)]
fit = kmeans(xx,5,iter.max = 100)
centers = fit$centers
centers
windows(800,800)
p = par(mfrow=c(5,1))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
votile = as.data.frame(data$Close - data$Open)
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
times = get_min_series()
time = as.character(index(data))
time = substr(time,12,19)
votile = as.data.frame(data$Close - data$Open)
colnames(votile) = 'change'
votile$time = time
votile$day = as.character(as.Date(rownames(votile)))
times = get_min_series()
votile = subset(votile,time %in% times)
xx = dcast(votile,day ~ time,value.var='change')
xx = xx[,2:ncol(xx)]
fit = kmeans(xx,5,iter.max = 100)
centers = fit$centers
centers
for( i in 1:5)
{
plot(centers[i,])
}
p = par(mfrow=c(5,1))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
windows(800,800)
p = par(mfrow=c(5,1))
centers = fit$centers
for( i in 1:5)
{
plot(centers[i,])
}
centers
labels = fit$cluster
index = which(labels == 1)
index
plot(centers[1,],type='l',col = 'green')
xx[index[1],])
xx
xx[index[1],]
centers
index = which(labels == 5)
index
lenth(index)
length(index)
fit = kmeans(xx,10,iter.max = 100)
windows(800,800)
p = par(mfrow=c(5,1))
centers = fit$centers
for( i in 1:10)
{
plot(centers[i,])
}
centers
